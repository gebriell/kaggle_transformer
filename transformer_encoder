{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2415872,"sourceType":"datasetVersion","datasetId":1461623},{"sourceId":9801,"sourceType":"datasetVersion","datasetId":6763}],"dockerImageVersionId":30674,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n# For viewing and manipulating data\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Importing the necessary libraries\nimport re\nimport math\nimport string\nimport nltk\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport gensim.downloader as api\nfrom gensim.models import KeyedVectors # >> alternative to gensim.downloader\nimport matplotlib.pyplot as plt\n\n# Getting particular functions from these libraries \nfrom torch import Tensor\nfrom sklearn.utils import resample\nfrom gensim.models import KeyedVectors\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom torch.utils.data import random_split, DataLoader, TensorDataset, Dataset\n\n# Using the NLTK to tokenize the text\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\n# Checks if a CUDA enabled GPU is available and prints out its information\nif torch.cuda.is_available():\n    print(\"CUDA is available!\")\n    for i in range(torch.cuda.device_count()):\n        print(f\"GPU {i}: {torch.cuda.get_device_name(i)}\")\n        \n    device = torch.device(\"cuda:0\")\n\nelse:\n    print(\"CUDA is not available.\")\n    device = torch.device(\"cpu\")\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nreviews_file = ''\nw2v_file = ''\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        file_name = os.path.join(dirname, filename)\n        if file_name.endswith('.csv'): \n            reviews_file = file_name\n        elif file_name.endswith('.bin'):\n            w2v_file = file_name\n        else:\n            print(f'Found unexpected file: {file_name}')\n                \nprint(f'Amazon reviews file: {reviews_file}')\nprint(f'Google news word to vec file: {w2v_file}')\n            \n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\nVERBOSE = False\ndef printv(text):\n    if VERBOSE: print('VERBOSE:', text)\n    return\n\ndef showV(text):\n    '''unconditional verbose output'''\n    print('VERBOSE:', text)\n    return\n\nDEV = True\ndef printd(text):\n    if DEV: print('DEV:', text)\n    return\n\ndef showD(text):\n    '''unconditional DEV output'''\n    print('VERBOSE:', text)\n    return\n\nshowCellCompletion = False\ndef showC(text):\n    if showCellCompletion:\n        print('Cell complete:', text)\n    return\n\nimport subprocess\nshowNv = False\naccelerator = False\n\ndef printNv():\n    if not showNv or not accelerator: return\n    mem_usage = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE)\n    print(mem_usage.stdout.decode('utf-8'))\n\nshowMemoryAllocation = True\ndef printM():\n    if not showMemoryAllocation: return\n    print(f\"Total allocated memory: {torch.cuda.memory_allocated()} bytes\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-14T09:41:05.431446Z","iopub.execute_input":"2024-04-14T09:41:05.432046Z","iopub.status.idle":"2024-04-14T09:41:05.452421Z","shell.execute_reply.started":"2024-04-14T09:41:05.432012Z","shell.execute_reply":"2024-04-14T09:41:05.451246Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"CUDA is available!\nGPU 0: Tesla P100-PCIE-16GB\nFound unexpected file: /kaggle/input/googlenewsvectorsnegative300/GoogleNews-vectors-negative300.bin.gz\nAmazon reviews file: /kaggle/input/amazon-product-reviews/Reviews.csv\nGoogle news word to vec file: /kaggle/input/googlenewsvectorsnegative300/GoogleNews-vectors-negative300.bin\n","output_type":"stream"}]},{"cell_type":"code","source":"#!unzip /usr/share/nltk_data/corpora/wordnet.zip -d /usr/share/nltk_data/corpora/","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:41:05.454385Z","iopub.execute_input":"2024-04-14T09:41:05.454766Z","iopub.status.idle":"2024-04-14T09:41:05.466768Z","shell.execute_reply.started":"2024-04-14T09:41:05.454730Z","shell.execute_reply":"2024-04-14T09:41:05.465626Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Load data from CSV\n#>>  3/13 needed to change the path as below\n# path ='/kaggle/input/Reviews.csv'#\"/kaggle/input/amazon-product-reviews/Reviews.csv\"\ndata = pd.read_csv(reviews_file) # Use pandas to analyze data\nshowD('Amazon reviews loaded into Panda')\n\n# print number of rows in our ratings column\nprintv(f'Number of reviews: {len(data[\"Score\"])}')\nprintv(f'Column names -\\n {data.columns}\\n') \nprintv(f'First five rows -\\n{data.head()}')\n\n# Check for empty entries or missing data in each column\nfor column in data.columns:\n    if data[column].isnull().values.any():\n        print(f\"Column '{column}' has empty entries or missing data.\")\n    else:\n        print(f\"Column '{column}' has no empty entries or missing data.\")\n\n# Get count of ratings \nrating_counts = data['Score'].value_counts()\n\n# Sort counts by index ascending\nrating_counts = rating_counts.sort_index()  \n\n# Create bar plot\nax = rating_counts.plot(kind = 'bar')\n\nax.set_title(\"Ratings Distribution\")\nax.set_xlabel(\"Rating\")\nax.set_ylabel(\"Number of Occurrences\")\n\n# Fix x-axis tick labels\nax.set_xticklabels(ax.get_xticklabels(), rotation = 0) \n\nfor rating, count in rating_counts.items():\n        print(f\"{count:,} samples from balanced data with rating {rating}\\n\")\n\nplt.show() #<< show the rating in each of the 5 categories\n\nbalanced_data_size = 5000 #25000<< number of reviews in each rating category, tailored for CPU capacity\n# Specify the column for sorting and balancing\nsort_column = 'Score'  # This is one the rating column\n\n# Sort the data by the rating values\nsorted_data = data.sort_values(by = sort_column)\n\n# Create a balanced dataset with 25,000 samples from each class\n#balanced_data = sorted_data.groupby(sort_column).apply(lambda x: x.sample(n=25000))\n\n#>> DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. \n#>> This behavior is deprecated, and in a future version of pandas the grouping \n#>> columns will be excluded from the operation. \n#>> Either pass `include_groups=False` to exclude the groupings or \n#>> explicitly select the grouping columns after groupby to silence this warning.\n#\nbalanced_data = sorted_data.groupby(sort_column).apply(lambda x: x.sample(n = balanced_data_size))\n\n#>> Does this mean to reset the row numbers?? ##Columns Numbers\nbalanced_data.reset_index(drop = True, inplace = True)\n\nprintv(f\"The number of reviews equally distributed across all ratings is {len(balanced_data['Score'])}\")\n\n# Get count of ratings\nrating_counts = balanced_data['Score'].value_counts()\n\n# Create bar plot\nax = rating_counts.plot(kind='bar')\n\nax.set_title(\"Ratings Distribution After Balancing\")\nax.set_xlabel(\"Rating\")\nax.set_ylabel(\"Number of Samples\")\n\n# Fix x-axis ticks  \nax.set_xticklabels(ax.get_xticklabels(), rotation = 0)\n\n# Print number of reviews per rating\n\nif DEV:\n    for rating, count in rating_counts.items():\n        print(f\"{count:,} samples from balanced data with rating {rating}\\n\")\n\nplt.show()\n\n\nimport spacy\nimport re\nimport pandas as pd\n\n# Load the English tokenizer model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Compile the regular expressions\nhtml_tags = re.compile(\"<.*?>\")\npunct_and_symbols = re.compile(r'[^\\w\\s\\']+')\n\ndef tokenizer(text, nlp):\n    \"\"\"\n    Tokenizes a text string and removes stop words.\n    \n    text (str): The text string to tokenize.\n    nlp: The Spacy language model.\n\n    Returns:\n        list: The tokenized text string.\n    \"\"\"\n    text = text.lower()  # Convert text to lowercase\n    text = html_tags.sub(\"\", text)  # Remove HTML tags\n    text = punct_and_symbols.sub(\"\", text)  # Remove punctuation and symbols\n\n    # Tokenize the text\n    doc = nlp(text)\n\n    # Remove stop words and punctuation tokens\n    # tokens = [token.text for token in doc if not token.is_punct]# and not token.is_stop]\n    tokens = [token.text for token in doc if not token.is_punct]# and not token.is_stop]\n\n    return tokens\n\n# Assuming balanced_data is a pandas DataFrame and 'Text' is a column containing the reviews\n# Apply the function to the Text column and store it in a new column\nbalanced_data['CleanedReview'] = balanced_data['Text'].apply(lambda x: tokenizer(x, nlp))\n\n# Show that cell has finished executing\nshowC(f'{tokenizer} defined, and then used to create CleanedReview column')\n\n# Store the Rating column\nrating = balanced_data['Score']  \n\n# Store the CleanedReview column\ntokenized_review = balanced_data['CleanedReview']\nshowD(f'specify the columns that will be used to train the classifier')\n\nprint(balanced_data['Text'][0],'\\n')\nprint(tokenized_review[0], '\\n')\nprint(len(tokenized_review[0]), '\\n')\nprint(tokenized_review.shape)\n\nfrom scipy import stats\n\ndef analyze_review_tokens(reviews):\n    token_counts = [len(review) for review in reviews]\n\n    mean = np.mean(token_counts)\n    median = np.median(token_counts)\n    mode = stats.mode(token_counts)\n\n    print(f\"Mean: {mean:.2f}\")\n    print(f\"Median: {median:.2f}\")\n    print(f\"Mode: {mode}\")\n\n    plt.figure(figsize=(8, 6))\n    plt.hist(token_counts, bins=20, edgecolor='black')\n    plt.xlabel('Number of Tokens')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Token Counts per Review')\n    plt.grid(True)\n    plt.show()\n\nanalyze_review_tokens(tokenized_review)\n\n# >> 3/29/24 Took less than a minute to run without the accelerator.\n# Load Word2Vec model\n#w2v = api.load('word2vec-google-news-300')\nw2v = KeyedVectors.load_word2vec_format (w2v_file, binary=True)\n\n# Define the aimum sequence length (adjust as needed)\n#>> Will increasing max_sequence_length impact performance?\nmax_sequence_length = 100\n\nshowD(f'{w2v} can map words onto vectors with 300 dimensions')\n\n\n#>> 3/29/24 Completed in less than 30 seconds using 1347 as max_sequence_length \n\n# Assume you have a list of tokenized review called tokenized_review\n# Each element in tokenized_review is a list of tokens for a single review\n\nlengths = []\nfor review_tokens in tokenized_review:\n    lengths.append(len(review_tokens))\n\nlengths = sorted(lengths)\nlengths = lengths[-1:0:-1]\nshowD(f'Lengths of 100 longest reviews: {lengths[0:100]}')        \n\nmax_sequence_length = 100 #<< 3/29/24 1347 was the longest review length in sample\n\n# Initialize an empty tensor for padded reviews on the GPU\npadded_reviews = torch.zeros((len(tokenized_review), max_sequence_length, 300))\n\n# Initialize a mask tensor of the same shape as padded_reviews\n# Set it to False (or 0) initially, representing that all positions are padding\n# mask = torch.zeros_like(padded_reviews, dtype=torch.bool)\n\n# Initialize a mask tensor of the same shape as padded_reviews but with only sequence length\nmask = torch.zeros((len(tokenized_review), max_sequence_length), dtype=torch.bool)\n\nout_words = {}\nwords_in = 0\nwords_out = 0\n\n# Now, during the padding and embedding conversion loop, update the mask as well\nfor i, review_tokens in enumerate(tokenized_review):\n    review_length = min(len(review_tokens), max_sequence_length)\n    for j in range(review_length):\n        word = review_tokens[j]\n        if word in w2v:\n            words_in += 1\n            # Use Word2Vec vector if available\n            padded_reviews[i, j, :] = torch.tensor(w2v[word])\n            mask[i, j] = True  # Update the mask to indicate the presence of a word\n        else:\n            words_out += 1\n            out_words[word] = out_words.get(word, 0) + 1\n        # Otherwise, the mask remains False (or 0) for padding\n\n# Now you have a mask tensor that you can use later in your processing to ignore padded values\n# For example, if you want to apply max pooling only on non-padded values, you could use:\n# review_embeddings = torch.max(padded_reviews * mask.unsqueeze(-1).float(), dim=1)[0]\n\n# Ensure the mask is treated as a float for any operations that require it\nmask = mask.float()\n\n# Now you can use this mask tensor to exclude the padding from any subsequent computations\n\nprintv(f'{words_in} words found with vector representations, {words_out} without')\nprintv(f'Number of unique words without vector representations: {len(out_words)}')\nprintd('Sample of words without vector representations')\nkwords = list(out_words.keys())\nfor idx in range(0,len(kwords)-1,100):\n    kword = kwords[idx]\n    printd(f'{kword} - {out_words[kword]}')\n# Apply max pooling to aggregate embeddings along the sequence dimension\n# review_embeddings = torch.max(padded_reviews, dim=1)[0]\n\n# Now,review_embeddings contains the aggregated Word2Vec \n# embeddings for each review on the GPU\n\nshowC(f\"Created zero-padded, standard length reviews\")\n\nprint(padded_reviews[1])\n\n#>> padded_reviews are 100 x 300 tensors, zero padded if necessary\n#>> to get the standard lenth\ntext_embeddings_tensors = padded_reviews.to(device)\n\n# Rating labels\nrating_labels_tensors = torch.tensor(rating.values).to(device)\n\n# Dataset\ndataset = TensorDataset(text_embeddings_tensors, rating_labels_tensors)\nshowC(f'{dataset} defined')\n\nprintM() # print(f\"Total allocated memory: {torch.cuda.memory_allocated()} bytes\")\nprintNv() #!nvidia-smi\nprint('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\nif accelerator and showNv:\n    print(torch.cuda.memory_summary())\n\n# #>> padded_reviews are 100 x 300 tensors, zero padded if necessary\n# #>> to get the standard lenth\n# text_embeddings_tensors = padded_reviews.to(device)\n\n# # Rating labels\n# rating_labels_tensors = torch.tensor(rating.values).to(device)\n\n# # Dataset\n# dataset = TensorDataset(text_embeddings_tensors, rating_labels_tensors)\n# showC(f'{dataset} defined')\n\n# print(text_embeddings_tensors.shape)\n# print(rating_labels_tensors.shape)\n# print(text_embeddings_tensors.device)\n# print(rating_labels_tensors.device)\n# print(dataset)\n\n# # Lengths \n# train_len = int(0.8 * len(dataset))\n# val_len = len(dataset) - train_len\n\n# # Random split\n# train_data, val_data = random_split(dataset, [train_len, val_len])\n\n# printv(f\"The amount of data we have to train with is {len(train_data)} revieww\") \n# printv(f\"The amount of data we have to validate with is {len(val_data)} reviews\")\n# #print(f\"The amount of data we have to validate with is on {train_data.device}\")\n# #print(f\"The amount of data we have to validate with is on {val_data.device}\")\n\n# # DataLoader for training data\n# train_loader = DataLoader(train_data, batch_size = 32, shuffle = True)  # Use shuffle for training\n\n# # DataLoader for validation data\n# val_loader = DataLoader(val_data, batch_size = 32, shuffle = False)  # No need to shuffle for validation","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:41:05.573488Z","iopub.execute_input":"2024-04-14T09:41:05.573853Z","iopub.status.idle":"2024-04-14T09:50:39.927535Z","shell.execute_reply.started":"2024-04-14T09:41:05.573826Z","shell.execute_reply":"2024-04-14T09:50:39.926463Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"VERBOSE: Amazon reviews loaded into Panda\nColumn 'Id' has no empty entries or missing data.\nColumn 'ProductId' has no empty entries or missing data.\nColumn 'UserId' has no empty entries or missing data.\nColumn 'ProfileName' has empty entries or missing data.\nColumn 'HelpfulnessNumerator' has no empty entries or missing data.\nColumn 'HelpfulnessDenominator' has no empty entries or missing data.\nColumn 'Score' has no empty entries or missing data.\nColumn 'Time' has no empty entries or missing data.\nColumn 'Summary' has empty entries or missing data.\nColumn 'Text' has no empty entries or missing data.\n52,268 samples from balanced data with rating 1\n\n29,769 samples from balanced data with rating 2\n\n42,640 samples from balanced data with rating 3\n\n80,655 samples from balanced data with rating 4\n\n363,122 samples from balanced data with rating 5\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"5,000 samples from balanced data with rating 1\n\n5,000 samples from balanced data with rating 2\n\n5,000 samples from balanced data with rating 3\n\n5,000 samples from balanced data with rating 4\n\n5,000 samples from balanced data with rating 5\n\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_76/3794905291.py:56: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  balanced_data = sorted_data.groupby(sort_column).apply(lambda x: x.sample(n = balanced_data_size))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"VERBOSE: specify the columns that will be used to train the classifier\nI bought a box, waist'd my $$ but people love me that I could give them this!!!<br />AFTER having a bough of HAVING to rush to bathroom I re-read the posts! AND looked at ingredients closer!<br />Gluten Free Whole Grain Dextrins<br />IF you don't have a problem GREAT! If you do you may end up re-reading the 1's later -}<br />I like the idea of Bites had them before. going to try out Pamela's.<br />I Love the Nana's Cookies but IT's VERY hard Not to eat the Whole cookie! The  <a href=\"http://www.amazon.com/gp/product/B000FNEX8C\">Nana's No Gluten Lemon Cookie, 3.5-Ounce Cookies (Pack of 12)</a> & <a href=\"http://www.amazon.com/gp/product/B000FNB3BC\">Nana's No Gluten Ginger Cookie, 3.5-Ounce Packages (Pack of 12)</a> It's TWO servings!! Plus the texture is soooo smooth it go's down VERY easy! I don't have Coffee or Chocolate anymore! Have Green Tea Decaf.<br />NEED to go to the Nana's Banana Bars + modify or delete my post!<br />Only Bites I hope Pamela's ginger works out for me!<br />I Do LOVE this TOO <a href=\"http://www.amazon.com/gp/product/B000FVUM0C\">Lundberg Eco-Farmed Honey Nut Rice Cake, 9.5-Ounce Units  (Pack of 12)</a> +<a href=\"http://www.amazon.com/gp/product/B000FVUM02\">Lundberg Eco-Farmed Buttery Caramel Rice Cake, 9.5-Ounce Units  (Pack of 12)</a> + <a href=\"http://www.amazon.com/gp/product/B000FVZW7K\">Lundberg Eco-Farmed Brown Rice Cake, Salt Free, 8.5-Ounce Units  (Pack of 12)</a> \n\n['i', 'bought', 'a', 'box', \"waist'd\", 'my', ' ', 'but', 'people', 'love', 'me', 'that', 'i', 'could', 'give', 'them', 'thisafter', 'having', 'a', 'bough', 'of', 'having', 'to', 'rush', 'to', 'bathroom', 'i', 'reread', 'the', 'posts', 'and', 'looked', 'at', 'ingredients', 'closergluten', 'free', 'whole', 'grain', 'dextrinsif', 'you', 'do', \"n't\", 'have', 'a', 'problem', 'great', 'if', 'you', 'do', 'you', 'may', 'end', 'up', 'rereading', 'the', '1', \"'s\", 'later', 'i', 'like', 'the', 'idea', 'of', 'bites', 'had', 'them', 'before', 'going', 'to', 'try', 'out', \"pamela'si\", 'love', 'the', 'nana', \"'s\", 'cookies', 'but', 'it', \"'s\", 'very', 'hard', 'not', 'to', 'eat', 'the', 'whole', 'cookie', 'the', ' ', 'nana', \"'s\", 'no', 'gluten', 'lemon', 'cookie', '35ounce', 'cookies', 'pack', 'of', '12', ' ', 'nana', \"'s\", 'no', 'gluten', 'ginger', 'cookie', '35ounce', 'packages', 'pack', 'of', '12', 'it', \"'s\", 'two', 'servings', 'plus', 'the', 'texture', 'is', 'soooo', 'smooth', 'it', 'go', \"'s\", 'down', 'very', 'easy', 'i', 'do', \"n't\", 'have', 'coffee', 'or', 'chocolate', 'anymore', 'have', 'green', 'tea', 'decafneed', 'to', 'go', 'to', 'the', 'nana', \"'s\", 'banana', 'bars', ' ', 'modify', 'or', 'delete', 'my', 'postonly', 'bites', 'i', 'hope', 'pamela', \"'s\", 'ginger', 'works', 'out', 'for', 'mei', 'do', 'love', 'this', 'too', 'lundberg', 'ecofarmed', 'honey', 'nut', 'rice', 'cake', '95ounce', 'units', ' ', 'pack', 'of', '12', 'lundberg', 'ecofarmed', 'buttery', 'caramel', 'rice', 'cake', '95ounce', 'units', ' ', 'pack', 'of', '12', ' ', 'lundberg', 'ecofarmed', 'brown', 'rice', 'cake', 'salt', 'free', '85ounce', 'units', ' ', 'pack', 'of', '12'] \n\n207 \n\n(25000,)\nMean: 89.69\nMedian: 65.00\nMode: ModeResult(mode=25, count=374)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"VERBOSE: KeyedVectors<vector_size=300, 3000000 keys> can map words onto vectors with 300 dimensions\nVERBOSE: Lengths of 100 longest reviews: [1534, 1364, 1247, 1097, 1072, 1053, 1053, 1053, 958, 935, 908, 891, 875, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 861, 854, 837, 836, 828, 826, 820, 799, 793, 743, 742, 741, 718, 716, 713, 706, 705, 696, 693, 691, 679, 675, 674, 670, 670, 669, 667, 663, 663, 641, 633, 625, 624, 619, 619, 614, 613, 612, 608, 607, 602, 596, 595, 588, 588, 588, 588, 587, 584, 582, 579, 577, 571, 571, 571, 570, 570, 569, 567, 565, 564, 563, 561, 560]\nDEV: Sample of words without vector representations\nDEV: a - 40774\nDEV: 10bag - 1\nDEV: mealproduct - 1\nDEV: servicedon't - 1\nDEV: milka - 5\nDEV: 5070 - 2\nDEV: colie - 1\nDEV: cadbury - 17\nDEV: nitriteif - 2\nDEV: biteif - 1\nDEV: butterif - 1\nDEV: ozbo - 3\nDEV: mixturewhich - 1\nDEV: knowall - 1\nDEV: wowthis - 1\nDEV: elsewherethey - 1\nDEV: nutrisca - 2\nDEV: vomitinghad - 2\nDEV: againguess - 1\nDEV: decafit - 2\nDEV: prizei - 1\nDEV: thingnot - 1\nDEV: creamyish - 1\nDEV: paprikawhich - 1\nDEV: porcupinessquirrelswhatever - 1\nDEV: 370001069 - 1\nDEV: snaplock - 2\nDEV: experiencethere - 1\nDEV: kirland - 2\nDEV: coffeethis - 9\nDEV: disappointedone - 1\nDEV: dayseems - 1\nDEV: extremesalthough - 1\nDEV: kinnitoos - 1\nDEV: snikiddy - 1\nDEV: ecta - 1\nDEV: nonpeanut - 2\nDEV: boyardeeknowing - 1\nDEV: laxativeswhich - 1\nDEV: 4200 - 1\nDEV: 1700 - 1\nDEV: stemspartial - 1\nDEV: blendingjust - 1\nDEV: batteryacid - 1\nDEV: ozi - 3\nDEV: werther - 2\nDEV: bitesi - 1\nDEV: cupsworth - 1\nDEV: greatbut - 4\nDEV: organictype - 2\nDEV: steamingresultpros - 1\nDEV: amazingi - 2\nDEV: jtc - 1\nDEV: 565 - 1\nDEV: mleveni - 1\nDEV: guiltfree - 7\nDEV: diiference - 1\nDEV: leaki - 1\nDEV: barilla - 14\nDEV: acidicon - 1\nDEV: perspective1 - 4\nDEV: chickenflavored - 4\nDEV: delobas - 1\nDEV: 3579 - 1\nDEV: lhasopoo - 1\nDEV: o'dells - 1\nDEV: twostar - 1\nDEV: powderychalky - 1\nDEV: 3998 - 1\nDEV: hadwould - 1\nDEV: whimi - 3\nDEV: wrappingthe - 1\nDEV: itexcept - 2\nDEV: blueberryzi - 1\nDEV: tolerateit - 1\nDEV: sweettwo - 1\nDEV: vanillay - 2\nDEV: kavalactonesi - 1\nDEV: nonesuch - 1\nDEV: velveetaey - 1\nDEV: unpalatableand - 1\nDEV: everydayupdate - 1\nDEV: sipi - 1\nDEV: sodaaspartame - 1\nDEV: smooshedwhy - 1\nDEV: truthinadvertising - 1\nDEV: teakind - 1\nDEV: tastemuch - 3\nDEV: rebaked - 1\nDEV: compained - 2\nDEV: bruleacutee - 1\nDEV: surprisebiscoff - 1\nDEV: thistastewise - 1\nDEV: insideoutside - 2\nDEV: brisling - 6\nDEV: informationcalories5 - 1\nDEV: shippingwowforgetaboutitham - 1\nDEV: branholds - 1\nDEV: anythingusing - 2\nDEV: strongtart - 1\nDEV: oddat - 1\nDEV: lolanyway - 1\nDEV: tastestronger - 1\nDEV: minewhile - 1\nDEV: bevmo - 1\nDEV: storeand - 1\nDEV: catsize - 1\nDEV: lme - 2\nDEV: tequilamy - 1\nDEV: meltingthe - 1\nDEV: valuefor - 1\nDEV: 30amount - 1\nDEV: serviing - 1\nDEV: mentionedthe - 2\nDEV: 8090 - 1\nDEV: coffess - 2\nDEV: greatcuisinart - 1\nDEV: supermix - 2\nDEV: bonusas - 1\nDEV: gamehave - 1\nDEV: fauxlime - 1\nDEV: sweetness1 - 1\nDEV: odlums - 1\nDEV: bottlethere - 1\nDEV: officethese - 1\nDEV: shortgrowing - 1\nDEV: ingredientsannie - 1\nDEV: bananamilk - 1\nDEV: 4ds - 1\nDEV: sweetthey - 1\nDEV: satifyingly - 2\nDEV: awesomethe - 1\nDEV: texturethus - 1\nDEV: needdesire - 1\nDEV: amazoncomgeneral - 1\nDEV: bowlhe - 1\nDEV: versatilityfirst - 1\nDEV: somefor - 1\nDEV: pourthrough - 1\nDEV: cerealnext - 1\nDEV: twomillimeter - 1\nDEV: blandperhaps - 1\nDEV: breakablethe - 1\nDEV: childhoodi - 1\nDEV: wonderingingredients - 1\nDEV: tryyou - 1\nDEV: providedthank - 1\nDEV: useas - 1\nDEV: stuffhonestly - 1\nDEV: possibilitiesi've - 1\nDEV: yummypeppermint - 1\nDEV: bestin - 1\nDEV: fructosedextrose - 1\nDEV: prefiltered - 1\nDEV: combinationsweetness - 1\nDEV: tastyi'm - 1\nDEV: brewingsystem - 1\nDEV: overwhelmingbut - 1\nDEV: therea - 1\nDEV: sthsogo - 1\nDEV: crunchya - 1\nDEV: goodthanks - 1\nDEV: sweetenersseriously - 1\nDEV: cafestol - 2\nDEV: ithencemy - 1\nDEV: peperoni - 1\nDEV: impressedi - 1\nDEV: etcthis - 1\nDEV: tatsty - 1\nDEV: diabeticsit - 1\nDEV: kittyies - 1\nDEV: colorsno - 1\nDEV: themjust - 1\nDEV: problemkeeping - 1\nDEV: opinionlike - 1\nDEV: theydo - 1\nDEV: floridawhere - 1\nDEV: helpcw - 1\nDEV: moraes - 1\nDEV: youmy - 1\nDEV: virgini - 1\nDEV: paldo - 1\nDEV: coffeesshop - 1\nDEV: tassimoin - 1\nDEV: mmmmmblueberry - 1\nDEV: whoprescribed - 1\nDEV: 2boats - 1\nDEV: 14yearold - 1\nDEV: learnanyway - 1\nDEV: roasterie - 1\nDEV: pcc - 1\nDEV: drinkerdon't - 1\nDEV: i'lleatanykindoffood - 1\nDEV: nonnutty - 1\nDEV: vinegari've - 1\ntensor([[-0.2256, -0.0195,  0.0908,  ...,  0.0282, -0.1777, -0.0060],\n        [-0.1562,  0.0315, -0.1279,  ..., -0.1514, -0.1279, -0.0427],\n        [ 0.0239, -0.0461,  0.0039,  ..., -0.2695, -0.0688, -0.2754],\n        ...,\n        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],\n        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],\n        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]])\nTotal allocated memory: 3001224704 bytes\n\n\n\n\n\n\n\n\n\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# HyperParameters for the module\nd_model = 300  # Should match the embedding dimension of your word embeddings\nseq_len = 100  # Maximum sequence length\ninput_size = d_model  # based on the output size of your feed-forward network\n\nnum_layers = 4 # Number of encoder layers\nh       = 10   # number of attention head\nd_ffn   = 1024 # dimension of the feedforward layer\n\ndropout = 0.0#0.1  # You can adjust the dropout if needed\neps     = 1e-6 # epsilon value to prevent the standard deviation from becoming zero\nepochs  = 10\nlearning_rate = 0.01\n\n\"\"\"\nTo ensure compatibility, it's important to choose the \nnumber of attention heads (h) such that d_model is \nevenly divisible by h in the multi-head attention \nmodule's self.d_k. This allows for a clean distribution \nof the model dimensionality across the attention heads.\n\"\"\"\n\n# d_model / attn.h = 300 / 10 = 30","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:39.929697Z","iopub.execute_input":"2024-04-14T09:50:39.930425Z","iopub.status.idle":"2024-04-14T09:50:39.938851Z","shell.execute_reply.started":"2024-04-14T09:50:39.930373Z","shell.execute_reply":"2024-04-14T09:50:39.937835Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"\"\\nTo ensure compatibility, it's important to choose the \\nnumber of attention heads (h) such that d_model is \\nevenly divisible by h in the multi-head attention \\nmodule's self.d_k. This allows for a clean distribution \\nof the model dimensionality across the attention heads.\\n\""},"metadata":{}}]},{"cell_type":"code","source":"class PositionalEncoding(nn.Module):\n    \n    def __init__(self, d_model: int, dropout: float, seq_len: int):\n        \"\"\"\n        Initialize the PositionalEncoding module.\n\n        Args:\n            d_model (int): The dimensionality of the model (embedding size).\n            dropout (float): The dropout rate to be applied.\n            seq_len (int): The maximum sequence length.\n        \"\"\"\n        super().__init__()\n        self.dropout = nn.Dropout(p=dropout)\n\n        # Create a tensor of shape (seq_len, 1) representing the positions\n        position = torch.arange(seq_len).unsqueeze(1)\n        \n        # Compute the denominator term for the sinusoidal positional encoding\n        # The denominator is 10000^(2i/d_model), where i is the position index\n        div_term = torch.exp(torch.arange(0, d_model, 2) * (-math.log(10000.0) / d_model))\n        \n        # Create a tensor of shape (seq_len, 1, d_model) to store the positional encodings\n        pe = torch.zeros(seq_len, 1, d_model)\n        \n        # Compute the sinusoidal positional encodings for even dimensions\n        # pe[:, 0, 0::2] selects the even dimensions (0, 2, 4, ...) of the positional encoding tensor\n        # position * div_term computes the angle for each position and even dimension\n        # torch.sin applies the sine function element-wise to compute the positional encoding values\n        pe[:, 0, 0::2] = torch.sin(position * div_term)\n        \n        # Compute the sinusoidal positional encodings for odd dimensions\n        # pe[:, 0, 1::2] selects the odd dimensions (1, 3, 5, ...) of the positional encoding tensor\n        # torch.cos applies the cosine function element-wise to compute the positional encoding values\n        pe[:, 0, 1::2] = torch.cos(position * div_term)\n        \n        # Register the positional encoding tensor as a buffer in the module\n        # This ensures that the positional encoding tensor is saved and loaded with the module\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        \"\"\"\n        Perform the forward pass of the PositionalEncoding module.\n\n        Args:\n            x (Tensor): The input tensor of shape (seq_len, batch_size, embedding_dim).\n\n        Returns:\n            Tensor: The input tensor with positional encodings added.\n        \"\"\"\n        # Add positional encodings to the input tensor\n        # x.size(0) returns the sequence length dimension of the input tensor\n        # self.pe[:x.size(0)] selects the positional encodings corresponding to the sequence length\n        x = x + self.pe[:x.size(0)]\n        \n        # Apply dropout to the tensor with positional encodings\n        return self.dropout(x)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:39.940253Z","iopub.execute_input":"2024-04-14T09:50:39.940635Z","iopub.status.idle":"2024-04-14T09:50:39.993683Z","shell.execute_reply.started":"2024-04-14T09:50:39.940601Z","shell.execute_reply":"2024-04-14T09:50:39.992696Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"class MultiHeadedAttention(nn.Module):\n    def __init__(self, h, d_model, dropout=dropout):\n        super().__init__()\n        \n        # Number of attention heads\n        self.h = h\n        \n        # Dimensionality of each attention head\n        self.d_k = d_model // h\n        \n        # Linear layers for query, key, value, and output projections\n        self.linears = nn.ModuleList([nn.Linear(d_model, d_model) for _ in range(4)])\n        \n        # Dropout layer\n        self.dropout = nn.Dropout(p=dropout)\n\n    @staticmethod\n    def scaled_dot_product_attention(query, key, value, mask=None, dropout=None):\n        # Compute the dimensionality of each attention head\n        d_k = query.size(-1)\n        \n        # Compute the attention scores using the dot product between query and key\n        scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)\n        \n        # Apply the mask to the attention scores (if provided)\n        if mask is not None:\n            scores = scores.masked_fill(mask == 0, float('-inf'))\n        \n        # Apply softmax to obtain the attention probabilities\n        p_attn = torch.softmax(scores, dim=-1)\n        \n        # Apply dropout to the attention probabilities (if specified)\n        if dropout is not None:\n            p_attn = dropout(p_attn)\n        \n        # Compute the weighted sum of values using the attention probabilities\n        # Return the attended values and attention probabilities\n        return torch.matmul(p_attn, value), p_attn\n\n    def forward(self, query, key, value, mask=None):\n        # Get the number of batches\n        nbatches = query.size(0)\n        \n        # Project and reshape the query, key, and value for multi-head attention\n        # The projections are done using the linear layers defined in __init__\n        query, key, value = [\n            l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2)\n            for l, x in zip(self.linears, (query, key, value))\n        ]\n        \n        # Perform scaled dot-product attention on the projected query, key, and value\n        x, attn = self.scaled_dot_product_attention(query, key, value, mask=mask, dropout=self.dropout)\n        \n        # Reshape the attended output and concatenate the attention heads\n        x = x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)\n        \n        # Apply a final linear projection to the concatenated output\n        return self.linears[-1](x)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:39.996685Z","iopub.execute_input":"2024-04-14T09:50:39.997081Z","iopub.status.idle":"2024-04-14T09:50:40.012838Z","shell.execute_reply.started":"2024-04-14T09:50:39.997043Z","shell.execute_reply":"2024-04-14T09:50:40.011844Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"def add_layer(x, y):\n    \"\"\"Adds two tensors together.\n\n    Args:\n    x: A torch.Tensor of shape (batch_size, seq_len, hidden_size).\n    y: A torch.Tensor of the same shape as x.\n\n    Returns:\n    A torch.Tensor of the same shape as x and y, containing the sum of the two tensors.\n    \"\"\"\n\n    return torch.add(x, y)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:40.013995Z","iopub.execute_input":"2024-04-14T09:50:40.014343Z","iopub.status.idle":"2024-04-14T09:50:40.028300Z","shell.execute_reply.started":"2024-04-14T09:50:40.014294Z","shell.execute_reply":"2024-04-14T09:50:40.027365Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"class LayerNorm(nn.Module):\n    \"\"\"\n    Construct a layernorm module (See citation for details).\n    \n    Layer normalization is a technique to normalize the activations of a layer.\n    It helps stabilize the training process and can lead to faster convergence.\n    \n    This implementation follows the original paper:\n    \"Layer Normalization\" by Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E. Hinton\n    https://arxiv.org/abs/1607.06450\n    \"\"\"\n    \n    def __init__(self, features, eps=1e-6):\n        \"\"\"\n        Initialize the LayerNorm module.\n        \n        Args:\n            features (int): The number of features (channels) in the input tensor.\n            eps (float): A small value added to the variance for numerical stability.\n                         Default is 1e-6.\n        \"\"\"\n        super(LayerNorm, self).__init__()\n        \n        # Create learnable parameters for scaling and shifting\n        self.a_2 = nn.Parameter(torch.ones(features))\n        self.b_2 = nn.Parameter(torch.zeros(features))\n        \n        self.eps = eps\n    \n    def forward(self, x):\n        \"\"\"\n        Perform layer normalization on the input tensor.\n        \n        Args:\n            x (torch.Tensor): Input tensor of shape (batch_size, ..., features).\n        \n        Returns:\n            torch.Tensor: Normalized tensor of the same shape as the input.\n        \"\"\"\n        # Compute the mean across the last dimension (features)\n        mean = x.mean(-1, keepdim=True)\n        \n        # Compute the standard deviation across the last dimension (features)\n        std = x.std(-1, keepdim=True)\n        \n        # Normalize the input tensor\n        x_normalized = (x - mean) / (std + self.eps)\n        \n        # Scale and shift the normalized tensor\n        out = self.a_2 * x_normalized + self.b_2\n        \n        return out","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:40.029628Z","iopub.execute_input":"2024-04-14T09:50:40.030007Z","iopub.status.idle":"2024-04-14T09:50:40.042876Z","shell.execute_reply.started":"2024-04-14T09:50:40.029976Z","shell.execute_reply":"2024-04-14T09:50:40.042016Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"class PositionwiseFeedForward(nn.Module):\n    def __init__(self, d_model: int, d_ffn: int, dropout: float):\n        \"\"\"\n        Initializes the PositionwiseFeedForward module.\n\n        Args:\n            d_model (int): The dimension of the input embeddings.\n            d_ffn (int): The dimension of the hidden layer in the feed-forward network.\n            dropout (float): The probability of dropout occurring.\n        \"\"\"\n        super().__init__()\n        \n        # Linear layer that maps from the input dimension (d_model) to the hidden dimension (d_ffn)\n        self.w_1 = nn.Linear(d_model, d_ffn)\n        \n        # Linear layer that maps from the hidden dimension (d_ffn) back to the input dimension (d_model)\n        self.w_2 = nn.Linear(d_ffn, d_model)\n        \n        # Dropout layer with the specified dropout probability\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        \"\"\"\n        Performs the forward pass of the PositionwiseFeedForward module.\n\n        Args:\n            x (torch.Tensor): The input tensor of shape (batch_size, seq_length, d_model),\n                              representing the output from the attention mechanism.\n\n        Returns:\n            torch.Tensor: The output tensor of shape (batch_size, seq_length, d_model),\n                          representing the expanded-and-contracted representation.\n        \"\"\"\n        \n        # Apply the first linear transformation (w_1) to the input tensor (x)\n        # This maps the input from the embedding dimension (d_model) to the hidden dimension (d_ffn)\n        hidden = self.w_1(x)\n        \n        # Apply the ReLU activation function to the hidden representation\n        activated = torch.relu(hidden)\n        \n        # Apply dropout to the activated hidden representation\n        dropped = self.dropout(activated)\n        \n        # Apply the second linear transformation (w_2) to the dropped representation\n        # This maps the hidden dimension (d_ffn) back to the embedding dimension (d_model)\n        output = self.w_2(dropped)\n        \n        # Return the final output tensor\n        return output","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:40.044370Z","iopub.execute_input":"2024-04-14T09:50:40.044703Z","iopub.status.idle":"2024-04-14T09:50:40.057985Z","shell.execute_reply.started":"2024-04-14T09:50:40.044672Z","shell.execute_reply":"2024-04-14T09:50:40.057155Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"class EncoderLayer(nn.Module):\n    def __init__(self, d_model, num_heads, d_ffn, dropout):\n        \"\"\"\n        Initialize an encoder layer.\n\n        Args:\n            d_model (int): The dimension of the input and output of the layer.\n            num_heads (int): The number of attention heads.\n            d_ffn (int): The dimension of the feedforward network.\n            dropout (float): The dropout probability.\n        \"\"\"\n        super().__init__()\n        self.self_attn = MultiHeadedAttention(num_heads, d_model, dropout)\n        self.feed_forward = PositionwiseFeedForward(d_model, d_ffn, dropout)\n        self.sublayer = nn.ModuleList([LayerNorm(d_model) for _ in range(2)])\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, mask):\n        \"\"\"\n        Perform the forward pass of the encoder layer.\n\n        Args:\n            x (torch.Tensor): The input tensor of shape (batch_size, sequence_length, d_model).\n            mask (torch.Tensor): The attention mask tensor of shape (batch_size, 1, sequence_length, sequence_length).\n\n        Returns:\n            torch.Tensor: The output tensor of the encoder layer.\n        \"\"\"\n        sublayer_output = self.self_attn(x, x, x, mask)\n        x = x + self.dropout(sublayer_output)  # Apply dropout to the sublayer output before adding it to the input\n        x = self.sublayer[0](x)  # Apply normalization after the residual connection\n        sublayer_output = self.feed_forward(x)\n        x = x + self.dropout(sublayer_output)  # Again, apply dropout before the residual connection\n        x = self.sublayer[1](x)  # Apply normalization after the residual connection\n        return x\n\nclass StackedEncoder(nn.Module):\n    def __init__(self, num_layers, d_model, num_heads, d_ffn, dropout):\n        \"\"\"\n        Initialize a stacked encoder.\n\n        Args:\n            num_layers (int): The number of encoder layers.\n            d_model (int): The dimension of the input and output of each layer.\n            num_heads (int): The number of attention heads in each layer.\n            d_ffn (int): The dimension of the feedforward network in each layer.\n            dropout (float): The dropout probability.\n        \"\"\"\n        super().__init__()\n        self.layers = nn.ModuleList([\n            EncoderLayer(d_model, num_heads, d_ffn, dropout) for _ in range(num_layers)\n        ])\n        self.norm = LayerNorm(d_model)\n\n    def forward(self, x, mask):\n        \"\"\"\n        Perform the forward pass of the stacked encoder.\n\n        Args:\n            x (torch.Tensor): The input tensor of shape (batch_size, sequence_length, d_model).\n            mask (torch.Tensor): The attention mask tensor of shape (batch_size, 1, sequence_length, sequence_length).\n\n        Returns:\n            torch.Tensor: The output tensor of the stacked encoder.\n        \"\"\"\n        for layer in self.layers:\n            x = layer(x, mask)\n        return self.norm(x)  # Apply normalization to the output of the last layer","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:40.059216Z","iopub.execute_input":"2024-04-14T09:50:40.059524Z","iopub.status.idle":"2024-04-14T09:50:40.073714Z","shell.execute_reply.started":"2024-04-14T09:50:40.059496Z","shell.execute_reply":"2024-04-14T09:50:40.072784Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"stacked_encoder = StackedEncoder(num_layers, d_model, \n                                 h, d_ffn, dropout).to(device)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:40.074690Z","iopub.execute_input":"2024-04-14T09:50:40.074951Z","iopub.status.idle":"2024-04-14T09:50:40.180435Z","shell.execute_reply.started":"2024-04-14T09:50:40.074928Z","shell.execute_reply":"2024-04-14T09:50:40.179640Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"#>> padded_reviews are 100 x 300 tensors, zero padded if necessary\n#>> to get the standard lenth\ntext_embeddings_tensors = padded_reviews.to(device)\n\n# Rating labels\nrating_labels_tensors = torch.tensor(rating.values).to(device)\n\n# Dataset\ndataset = TensorDataset(text_embeddings_tensors, rating_labels_tensors)\nshowC(f'{dataset} defined')\n\nprint(text_embeddings_tensors.shape)\nprint(rating_labels_tensors.shape)\nprint(text_embeddings_tensors.device)\nprint(rating_labels_tensors.device)\nprint(dataset)\n\n# DataLoader for training data\ndata_loader = DataLoader(dataset, batch_size = 32, shuffle = True)  # Use shuffle for training\n\n!nvidia-smi","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:40.182912Z","iopub.execute_input":"2024-04-14T09:50:40.183210Z","iopub.status.idle":"2024-04-14T09:50:42.001508Z","shell.execute_reply.started":"2024-04-14T09:50:40.183185Z","shell.execute_reply":"2024-04-14T09:50:42.000455Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"torch.Size([25000, 100, 300])\ntorch.Size([25000])\ncuda:0\ncuda:0\n<torch.utils.data.dataset.TensorDataset object at 0x7a71284cf850>\nSun Apr 14 09:50:41 2024       \n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 535.129.03             Driver Version: 535.129.03   CUDA Version: 12.2     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  Tesla P100-PCIE-16GB           Off | 00000000:00:04.0 Off |                    0 |\n| N/A   34C    P0              32W / 250W |   6008MiB / 16384MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n                                                                                         \n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n+---------------------------------------------------------------------------------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"total_encoded_batches = []  # List to store encoded batches\ntotal_y_batches = []        # List to store corresponding y batches\ni = 0\n\nfor x_batch, y_batch in data_loader:\n    print(f'Size of batch: {x_batch.shape}')\n    i += 1\n    print(i)\n    print(f\"Total allocated memory: {torch.cuda.memory_allocated()} bytes\")\n    \n    # Move the batch to the device\n    x_batch = x_batch.to(device)\n    y_batch = y_batch.to(device)\n    \n    # Create a mask of ones for each sequence in the batch\n    #mask = torch.ones(x_batch.size(0), seq_len, seq_len, device=device)\n    \n    # Encode the batch using the stacked_encoder\n    encoded_batch = stacked_encoder(x_batch, mask = None)\n    \n    # Append the encoded batch to the list\n    total_encoded_batches.append(encoded_batch.detach().cpu())\n    total_y_batches.append(y_batch.detach().cpu())\n    \n    print(f'Current Size of Reviews: {len(total_encoded_batches)} tensors')\n    print(f'Current Size of Ratings: {len(total_y_batches)} tensors')\n\n\n# Concatenate all the encoded batches into a single tensor\ntotal_encoded_batch = torch.cat(total_encoded_batches, dim = 0)\n\n# Concatenate all the corresponding y batches into a single tensor\ntotal_y_batch = torch.cat(total_y_batches, dim = 0)\n\nprint(f'Concatenated Reviews Size: {total_encoded_batch.shape}')\nprint(f'Concatenated Ratings Size: {total_y_batch.shape}')","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:42.003114Z","iopub.execute_input":"2024-04-14T09:50:42.003435Z","iopub.status.idle":"2024-04-14T09:50:52.452908Z","shell.execute_reply.started":"2024-04-14T09:50:42.003405Z","shell.execute_reply":"2024-04-14T09:50:52.451871Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Size of batch: torch.Size([32, 100, 300])\n1\nTotal allocated memory: 3020737536 bytes\nCurrent Size of Reviews: 1 tensors\nCurrent Size of Ratings: 1 tensors\nSize of batch: torch.Size([32, 100, 300])\n2\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 2 tensors\nCurrent Size of Ratings: 2 tensors\nSize of batch: torch.Size([32, 100, 300])\n3\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 3 tensors\nCurrent Size of Ratings: 3 tensors\nSize of batch: torch.Size([32, 100, 300])\n4\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 4 tensors\nCurrent Size of Ratings: 4 tensors\nSize of batch: torch.Size([32, 100, 300])\n5\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 5 tensors\nCurrent Size of Ratings: 5 tensors\nSize of batch: torch.Size([32, 100, 300])\n6\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 6 tensors\nCurrent Size of Ratings: 6 tensors\nSize of batch: torch.Size([32, 100, 300])\n7\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 7 tensors\nCurrent Size of Ratings: 7 tensors\nSize of batch: torch.Size([32, 100, 300])\n8\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 8 tensors\nCurrent Size of Ratings: 8 tensors\nSize of batch: torch.Size([32, 100, 300])\n9\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 9 tensors\nCurrent Size of Ratings: 9 tensors\nSize of batch: torch.Size([32, 100, 300])\n10\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 10 tensors\nCurrent Size of Ratings: 10 tensors\nSize of batch: torch.Size([32, 100, 300])\n11\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 11 tensors\nCurrent Size of Ratings: 11 tensors\nSize of batch: torch.Size([32, 100, 300])\n12\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 12 tensors\nCurrent Size of Ratings: 12 tensors\nSize of batch: torch.Size([32, 100, 300])\n13\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 13 tensors\nCurrent Size of Ratings: 13 tensors\nSize of batch: torch.Size([32, 100, 300])\n14\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 14 tensors\nCurrent Size of Ratings: 14 tensors\nSize of batch: torch.Size([32, 100, 300])\n15\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 15 tensors\nCurrent Size of Ratings: 15 tensors\nSize of batch: torch.Size([32, 100, 300])\n16\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 16 tensors\nCurrent Size of Ratings: 16 tensors\nSize of batch: torch.Size([32, 100, 300])\n17\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 17 tensors\nCurrent Size of Ratings: 17 tensors\nSize of batch: torch.Size([32, 100, 300])\n18\nTotal allocated memory: 3333462016 bytes\nCurrent Size of Reviews: 18 tensors\nCurrent Size of Ratings: 18 tensors\nSize of batch: torch.Size([32, 100, 300])\n19\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 19 tensors\nCurrent Size of Ratings: 19 tensors\nSize of batch: torch.Size([32, 100, 300])\n20\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 20 tensors\nCurrent Size of Ratings: 20 tensors\nSize of batch: torch.Size([32, 100, 300])\n21\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 21 tensors\nCurrent Size of Ratings: 21 tensors\nSize of batch: torch.Size([32, 100, 300])\n22\nTotal allocated memory: 3333462016 bytes\nCurrent Size of Reviews: 22 tensors\nCurrent Size of Ratings: 22 tensors\nSize of batch: torch.Size([32, 100, 300])\n23\nTotal allocated memory: 3332796416 bytes\nCurrent Size of Reviews: 23 tensors\nCurrent Size of Ratings: 23 tensors\nSize of batch: torch.Size([32, 100, 300])\n24\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 24 tensors\nCurrent Size of Ratings: 24 tensors\nSize of batch: torch.Size([32, 100, 300])\n25\nTotal allocated memory: 3334742016 bytes\nCurrent Size of Reviews: 25 tensors\nCurrent Size of Ratings: 25 tensors\nSize of batch: torch.Size([32, 100, 300])\n26\nTotal allocated memory: 3332847616 bytes\nCurrent Size of Reviews: 26 tensors\nCurrent Size of Ratings: 26 tensors\nSize of batch: torch.Size([32, 100, 300])\n27\nTotal allocated memory: 3332847616 bytes\nCurrent Size of Reviews: 27 tensors\nCurrent Size of Ratings: 27 tensors\nSize of batch: torch.Size([32, 100, 300])\n28\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 28 tensors\nCurrent Size of Ratings: 28 tensors\nSize of batch: torch.Size([32, 100, 300])\n29\nTotal allocated memory: 3333462016 bytes\nCurrent Size of Reviews: 29 tensors\nCurrent Size of Ratings: 29 tensors\nSize of batch: torch.Size([32, 100, 300])\n30\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 30 tensors\nCurrent Size of Ratings: 30 tensors\nSize of batch: torch.Size([32, 100, 300])\n31\nTotal allocated memory: 3333462016 bytes\nCurrent Size of Reviews: 31 tensors\nCurrent Size of Ratings: 31 tensors\nSize of batch: torch.Size([32, 100, 300])\n32\nTotal allocated memory: 3335049216 bytes\nCurrent Size of Reviews: 32 tensors\nCurrent Size of Ratings: 32 tensors\nSize of batch: torch.Size([32, 100, 300])\n33\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 33 tensors\nCurrent Size of Ratings: 33 tensors\nSize of batch: torch.Size([32, 100, 300])\n34\nTotal allocated memory: 3332847616 bytes\nCurrent Size of Reviews: 34 tensors\nCurrent Size of Ratings: 34 tensors\nSize of batch: torch.Size([32, 100, 300])\n35\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 35 tensors\nCurrent Size of Ratings: 35 tensors\nSize of batch: torch.Size([32, 100, 300])\n36\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 36 tensors\nCurrent Size of Ratings: 36 tensors\nSize of batch: torch.Size([32, 100, 300])\n37\nTotal allocated memory: 3332847616 bytes\nCurrent Size of Reviews: 37 tensors\nCurrent Size of Ratings: 37 tensors\nSize of batch: torch.Size([32, 100, 300])\n38\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 38 tensors\nCurrent Size of Ratings: 38 tensors\nSize of batch: torch.Size([32, 100, 300])\n39\nTotal allocated memory: 3334742016 bytes\nCurrent Size of Reviews: 39 tensors\nCurrent Size of Ratings: 39 tensors\nSize of batch: torch.Size([32, 100, 300])\n40\nTotal allocated memory: 3333462016 bytes\nCurrent Size of Reviews: 40 tensors\nCurrent Size of Ratings: 40 tensors\nSize of batch: torch.Size([32, 100, 300])\n41\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 41 tensors\nCurrent Size of Ratings: 41 tensors\nSize of batch: torch.Size([32, 100, 300])\n42\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 42 tensors\nCurrent Size of Ratings: 42 tensors\nSize of batch: torch.Size([32, 100, 300])\n43\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 43 tensors\nCurrent Size of Ratings: 43 tensors\nSize of batch: torch.Size([32, 100, 300])\n44\nTotal allocated memory: 3333769216 bytes\nCurrent Size of Reviews: 44 tensors\nCurrent Size of Ratings: 44 tensors\nSize of batch: torch.Size([32, 100, 300])\n45\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 45 tensors\nCurrent Size of Ratings: 45 tensors\nSize of batch: torch.Size([32, 100, 300])\n46\nTotal allocated memory: 3336022016 bytes\nCurrent Size of Reviews: 46 tensors\nCurrent Size of Ratings: 46 tensors\nSize of batch: torch.Size([32, 100, 300])\n47\nTotal allocated memory: 3335305216 bytes\nCurrent Size of Reviews: 47 tensors\nCurrent Size of Ratings: 47 tensors\nSize of batch: torch.Size([32, 100, 300])\n48\nTotal allocated memory: 3335049216 bytes\nCurrent Size of Reviews: 48 tensors\nCurrent Size of Ratings: 48 tensors\nSize of batch: torch.Size([32, 100, 300])\n49\nTotal allocated memory: 3334639616 bytes\nCurrent Size of Reviews: 49 tensors\nCurrent Size of Ratings: 49 tensors\nSize of batch: torch.Size([32, 100, 300])\n50\nTotal allocated memory: 3335714816 bytes\nCurrent Size of Reviews: 50 tensors\nCurrent Size of Ratings: 50 tensors\nSize of batch: torch.Size([32, 100, 300])\n51\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 51 tensors\nCurrent Size of Ratings: 51 tensors\nSize of batch: torch.Size([32, 100, 300])\n52\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 52 tensors\nCurrent Size of Ratings: 52 tensors\nSize of batch: torch.Size([32, 100, 300])\n53\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 53 tensors\nCurrent Size of Ratings: 53 tensors\nSize of batch: torch.Size([32, 100, 300])\n54\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 54 tensors\nCurrent Size of Ratings: 54 tensors\nSize of batch: torch.Size([32, 100, 300])\n55\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 55 tensors\nCurrent Size of Ratings: 55 tensors\nSize of batch: torch.Size([32, 100, 300])\n56\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 56 tensors\nCurrent Size of Ratings: 56 tensors\nSize of batch: torch.Size([32, 100, 300])\n57\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 57 tensors\nCurrent Size of Ratings: 57 tensors\nSize of batch: torch.Size([32, 100, 300])\n58\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 58 tensors\nCurrent Size of Ratings: 58 tensors\nSize of batch: torch.Size([32, 100, 300])\n59\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 59 tensors\nCurrent Size of Ratings: 59 tensors\nSize of batch: torch.Size([32, 100, 300])\n60\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 60 tensors\nCurrent Size of Ratings: 60 tensors\nSize of batch: torch.Size([32, 100, 300])\n61\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 61 tensors\nCurrent Size of Ratings: 61 tensors\nSize of batch: torch.Size([32, 100, 300])\n62\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 62 tensors\nCurrent Size of Ratings: 62 tensors\nSize of batch: torch.Size([32, 100, 300])\n63\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 63 tensors\nCurrent Size of Ratings: 63 tensors\nSize of batch: torch.Size([32, 100, 300])\n64\nTotal allocated memory: 3334690816 bytes\nCurrent Size of Reviews: 64 tensors\nCurrent Size of Ratings: 64 tensors\nSize of batch: torch.Size([32, 100, 300])\n65\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 65 tensors\nCurrent Size of Ratings: 65 tensors\nSize of batch: torch.Size([32, 100, 300])\n66\nTotal allocated memory: 3334690816 bytes\nCurrent Size of Reviews: 66 tensors\nCurrent Size of Ratings: 66 tensors\nSize of batch: torch.Size([32, 100, 300])\n67\nTotal allocated memory: 3334998016 bytes\nCurrent Size of Reviews: 67 tensors\nCurrent Size of Ratings: 67 tensors\nSize of batch: torch.Size([32, 100, 300])\n68\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 68 tensors\nCurrent Size of Ratings: 68 tensors\nSize of batch: torch.Size([32, 100, 300])\n69\nTotal allocated memory: 3334998016 bytes\nCurrent Size of Reviews: 69 tensors\nCurrent Size of Ratings: 69 tensors\nSize of batch: torch.Size([32, 100, 300])\n70\nTotal allocated memory: 3334690816 bytes\nCurrent Size of Reviews: 70 tensors\nCurrent Size of Ratings: 70 tensors\nSize of batch: torch.Size([32, 100, 300])\n71\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 71 tensors\nCurrent Size of Ratings: 71 tensors\nSize of batch: torch.Size([32, 100, 300])\n72\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 72 tensors\nCurrent Size of Ratings: 72 tensors\nSize of batch: torch.Size([32, 100, 300])\n73\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 73 tensors\nCurrent Size of Ratings: 73 tensors\nSize of batch: torch.Size([32, 100, 300])\n74\nTotal allocated memory: 3334998016 bytes\nCurrent Size of Reviews: 74 tensors\nCurrent Size of Ratings: 74 tensors\nSize of batch: torch.Size([32, 100, 300])\n75\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 75 tensors\nCurrent Size of Ratings: 75 tensors\nSize of batch: torch.Size([32, 100, 300])\n76\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 76 tensors\nCurrent Size of Ratings: 76 tensors\nSize of batch: torch.Size([32, 100, 300])\n77\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 77 tensors\nCurrent Size of Ratings: 77 tensors\nSize of batch: torch.Size([32, 100, 300])\n78\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 78 tensors\nCurrent Size of Ratings: 78 tensors\nSize of batch: torch.Size([32, 100, 300])\n79\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 79 tensors\nCurrent Size of Ratings: 79 tensors\nSize of batch: torch.Size([32, 100, 300])\n80\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 80 tensors\nCurrent Size of Ratings: 80 tensors\nSize of batch: torch.Size([32, 100, 300])\n81\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 81 tensors\nCurrent Size of Ratings: 81 tensors\nSize of batch: torch.Size([32, 100, 300])\n82\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 82 tensors\nCurrent Size of Ratings: 82 tensors\nSize of batch: torch.Size([32, 100, 300])\n83\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 83 tensors\nCurrent Size of Ratings: 83 tensors\nSize of batch: torch.Size([32, 100, 300])\n84\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 84 tensors\nCurrent Size of Ratings: 84 tensors\nSize of batch: torch.Size([32, 100, 300])\n85\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 85 tensors\nCurrent Size of Ratings: 85 tensors\nSize of batch: torch.Size([32, 100, 300])\n86\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 86 tensors\nCurrent Size of Ratings: 86 tensors\nSize of batch: torch.Size([32, 100, 300])\n87\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 87 tensors\nCurrent Size of Ratings: 87 tensors\nSize of batch: torch.Size([32, 100, 300])\n88\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 88 tensors\nCurrent Size of Ratings: 88 tensors\nSize of batch: torch.Size([32, 100, 300])\n89\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 89 tensors\nCurrent Size of Ratings: 89 tensors\nSize of batch: torch.Size([32, 100, 300])\n90\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 90 tensors\nCurrent Size of Ratings: 90 tensors\nSize of batch: torch.Size([32, 100, 300])\n91\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 91 tensors\nCurrent Size of Ratings: 91 tensors\nSize of batch: torch.Size([32, 100, 300])\n92\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 92 tensors\nCurrent Size of Ratings: 92 tensors\nSize of batch: torch.Size([32, 100, 300])\n93\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 93 tensors\nCurrent Size of Ratings: 93 tensors\nSize of batch: torch.Size([32, 100, 300])\n94\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 94 tensors\nCurrent Size of Ratings: 94 tensors\nSize of batch: torch.Size([32, 100, 300])\n95\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 95 tensors\nCurrent Size of Ratings: 95 tensors\nSize of batch: torch.Size([32, 100, 300])\n96\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 96 tensors\nCurrent Size of Ratings: 96 tensors\nSize of batch: torch.Size([32, 100, 300])\n97\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 97 tensors\nCurrent Size of Ratings: 97 tensors\nSize of batch: torch.Size([32, 100, 300])\n98\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 98 tensors\nCurrent Size of Ratings: 98 tensors\nSize of batch: torch.Size([32, 100, 300])\n99\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 99 tensors\nCurrent Size of Ratings: 99 tensors\nSize of batch: torch.Size([32, 100, 300])\n100\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 100 tensors\nCurrent Size of Ratings: 100 tensors\nSize of batch: torch.Size([32, 100, 300])\n101\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 101 tensors\nCurrent Size of Ratings: 101 tensors\nSize of batch: torch.Size([32, 100, 300])\n102\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 102 tensors\nCurrent Size of Ratings: 102 tensors\nSize of batch: torch.Size([32, 100, 300])\n103\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 103 tensors\nCurrent Size of Ratings: 103 tensors\nSize of batch: torch.Size([32, 100, 300])\n104\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 104 tensors\nCurrent Size of Ratings: 104 tensors\nSize of batch: torch.Size([32, 100, 300])\n105\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 105 tensors\nCurrent Size of Ratings: 105 tensors\nSize of batch: torch.Size([32, 100, 300])\n106\nTotal allocated memory: 3334998016 bytes\nCurrent Size of Reviews: 106 tensors\nCurrent Size of Ratings: 106 tensors\nSize of batch: torch.Size([32, 100, 300])\n107\nTotal allocated memory: 3334690816 bytes\nCurrent Size of Reviews: 107 tensors\nCurrent Size of Ratings: 107 tensors\nSize of batch: torch.Size([32, 100, 300])\n108\nTotal allocated memory: 3335305216 bytes\nCurrent Size of Reviews: 108 tensors\nCurrent Size of Ratings: 108 tensors\nSize of batch: torch.Size([32, 100, 300])\n109\nTotal allocated memory: 3334076416 bytes\nCurrent Size of Reviews: 109 tensors\nCurrent Size of Ratings: 109 tensors\nSize of batch: torch.Size([32, 100, 300])\n110\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 110 tensors\nCurrent Size of Ratings: 110 tensors\nSize of batch: torch.Size([32, 100, 300])\n111\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 111 tensors\nCurrent Size of Ratings: 111 tensors\nSize of batch: torch.Size([32, 100, 300])\n112\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 112 tensors\nCurrent Size of Ratings: 112 tensors\nSize of batch: torch.Size([32, 100, 300])\n113\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 113 tensors\nCurrent Size of Ratings: 113 tensors\nSize of batch: torch.Size([32, 100, 300])\n114\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 114 tensors\nCurrent Size of Ratings: 114 tensors\nSize of batch: torch.Size([32, 100, 300])\n115\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 115 tensors\nCurrent Size of Ratings: 115 tensors\nSize of batch: torch.Size([32, 100, 300])\n116\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 116 tensors\nCurrent Size of Ratings: 116 tensors\nSize of batch: torch.Size([32, 100, 300])\n117\nTotal allocated memory: 3334742016 bytes\nCurrent Size of Reviews: 117 tensors\nCurrent Size of Ratings: 117 tensors\nSize of batch: torch.Size([32, 100, 300])\n118\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 118 tensors\nCurrent Size of Ratings: 118 tensors\nSize of batch: torch.Size([32, 100, 300])\n119\nTotal allocated memory: 3334690816 bytes\nCurrent Size of Reviews: 119 tensors\nCurrent Size of Ratings: 119 tensors\nSize of batch: torch.Size([32, 100, 300])\n120\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 120 tensors\nCurrent Size of Ratings: 120 tensors\nSize of batch: torch.Size([32, 100, 300])\n121\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 121 tensors\nCurrent Size of Ratings: 121 tensors\nSize of batch: torch.Size([32, 100, 300])\n122\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 122 tensors\nCurrent Size of Ratings: 122 tensors\nSize of batch: torch.Size([32, 100, 300])\n123\nTotal allocated memory: 3334383616 bytes\nCurrent Size of Reviews: 123 tensors\nCurrent Size of Ratings: 123 tensors\nSize of batch: torch.Size([32, 100, 300])\n124\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 124 tensors\nCurrent Size of Ratings: 124 tensors\nSize of batch: torch.Size([32, 100, 300])\n125\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 125 tensors\nCurrent Size of Ratings: 125 tensors\nSize of batch: torch.Size([32, 100, 300])\n126\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 126 tensors\nCurrent Size of Ratings: 126 tensors\nSize of batch: torch.Size([32, 100, 300])\n127\nTotal allocated memory: 3334434816 bytes\nCurrent Size of Reviews: 127 tensors\nCurrent Size of Ratings: 127 tensors\nSize of batch: torch.Size([32, 100, 300])\n128\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 128 tensors\nCurrent Size of Ratings: 128 tensors\nSize of batch: torch.Size([32, 100, 300])\n129\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 129 tensors\nCurrent Size of Ratings: 129 tensors\nSize of batch: torch.Size([32, 100, 300])\n130\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 130 tensors\nCurrent Size of Ratings: 130 tensors\nSize of batch: torch.Size([32, 100, 300])\n131\nTotal allocated memory: 3333820416 bytes\nCurrent Size of Reviews: 131 tensors\nCurrent Size of Ratings: 131 tensors\nSize of batch: torch.Size([32, 100, 300])\n132\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 132 tensors\nCurrent Size of Ratings: 132 tensors\nSize of batch: torch.Size([32, 100, 300])\n133\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 133 tensors\nCurrent Size of Ratings: 133 tensors\nSize of batch: torch.Size([32, 100, 300])\n134\nTotal allocated memory: 3333513216 bytes\nCurrent Size of Reviews: 134 tensors\nCurrent Size of Ratings: 134 tensors\nSize of batch: torch.Size([32, 100, 300])\n135\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 135 tensors\nCurrent Size of Ratings: 135 tensors\nSize of batch: torch.Size([32, 100, 300])\n136\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 136 tensors\nCurrent Size of Ratings: 136 tensors\nSize of batch: torch.Size([32, 100, 300])\n137\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 137 tensors\nCurrent Size of Ratings: 137 tensors\nSize of batch: torch.Size([32, 100, 300])\n138\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 138 tensors\nCurrent Size of Ratings: 138 tensors\nSize of batch: torch.Size([32, 100, 300])\n139\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 139 tensors\nCurrent Size of Ratings: 139 tensors\nSize of batch: torch.Size([32, 100, 300])\n140\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 140 tensors\nCurrent Size of Ratings: 140 tensors\nSize of batch: torch.Size([32, 100, 300])\n141\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 141 tensors\nCurrent Size of Ratings: 141 tensors\nSize of batch: torch.Size([32, 100, 300])\n142\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 142 tensors\nCurrent Size of Ratings: 142 tensors\nSize of batch: torch.Size([32, 100, 300])\n143\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 143 tensors\nCurrent Size of Ratings: 143 tensors\nSize of batch: torch.Size([32, 100, 300])\n144\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 144 tensors\nCurrent Size of Ratings: 144 tensors\nSize of batch: torch.Size([32, 100, 300])\n145\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 145 tensors\nCurrent Size of Ratings: 145 tensors\nSize of batch: torch.Size([32, 100, 300])\n146\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 146 tensors\nCurrent Size of Ratings: 146 tensors\nSize of batch: torch.Size([32, 100, 300])\n147\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 147 tensors\nCurrent Size of Ratings: 147 tensors\nSize of batch: torch.Size([32, 100, 300])\n148\nTotal allocated memory: 3333820416 bytes\nCurrent Size of Reviews: 148 tensors\nCurrent Size of Ratings: 148 tensors\nSize of batch: torch.Size([32, 100, 300])\n149\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 149 tensors\nCurrent Size of Ratings: 149 tensors\nSize of batch: torch.Size([32, 100, 300])\n150\nTotal allocated memory: 3333820416 bytes\nCurrent Size of Reviews: 150 tensors\nCurrent Size of Ratings: 150 tensors\nSize of batch: torch.Size([32, 100, 300])\n151\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 151 tensors\nCurrent Size of Ratings: 151 tensors\nSize of batch: torch.Size([32, 100, 300])\n152\nTotal allocated memory: 3334127616 bytes\nCurrent Size of Reviews: 152 tensors\nCurrent Size of Ratings: 152 tensors\nSize of batch: torch.Size([32, 100, 300])\n153\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 153 tensors\nCurrent Size of Ratings: 153 tensors\nSize of batch: torch.Size([32, 100, 300])\n154\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 154 tensors\nCurrent Size of Ratings: 154 tensors\nSize of batch: torch.Size([32, 100, 300])\n155\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 155 tensors\nCurrent Size of Ratings: 155 tensors\nSize of batch: torch.Size([32, 100, 300])\n156\nTotal allocated memory: 3334025216 bytes\nCurrent Size of Reviews: 156 tensors\nCurrent Size of Ratings: 156 tensors\nSize of batch: torch.Size([32, 100, 300])\n157\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 157 tensors\nCurrent Size of Ratings: 157 tensors\nSize of batch: torch.Size([32, 100, 300])\n158\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 158 tensors\nCurrent Size of Ratings: 158 tensors\nSize of batch: torch.Size([32, 100, 300])\n159\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 159 tensors\nCurrent Size of Ratings: 159 tensors\nSize of batch: torch.Size([32, 100, 300])\n160\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 160 tensors\nCurrent Size of Ratings: 160 tensors\nSize of batch: torch.Size([32, 100, 300])\n161\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 161 tensors\nCurrent Size of Ratings: 161 tensors\nSize of batch: torch.Size([32, 100, 300])\n162\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 162 tensors\nCurrent Size of Ratings: 162 tensors\nSize of batch: torch.Size([32, 100, 300])\n163\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 163 tensors\nCurrent Size of Ratings: 163 tensors\nSize of batch: torch.Size([32, 100, 300])\n164\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 164 tensors\nCurrent Size of Ratings: 164 tensors\nSize of batch: torch.Size([32, 100, 300])\n165\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 165 tensors\nCurrent Size of Ratings: 165 tensors\nSize of batch: torch.Size([32, 100, 300])\n166\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 166 tensors\nCurrent Size of Ratings: 166 tensors\nSize of batch: torch.Size([32, 100, 300])\n167\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 167 tensors\nCurrent Size of Ratings: 167 tensors\nSize of batch: torch.Size([32, 100, 300])\n168\nTotal allocated memory: 3333410816 bytes\nCurrent Size of Reviews: 168 tensors\nCurrent Size of Ratings: 168 tensors\nSize of batch: torch.Size([32, 100, 300])\n169\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 169 tensors\nCurrent Size of Ratings: 169 tensors\nSize of batch: torch.Size([32, 100, 300])\n170\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 170 tensors\nCurrent Size of Ratings: 170 tensors\nSize of batch: torch.Size([32, 100, 300])\n171\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 171 tensors\nCurrent Size of Ratings: 171 tensors\nSize of batch: torch.Size([32, 100, 300])\n172\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 172 tensors\nCurrent Size of Ratings: 172 tensors\nSize of batch: torch.Size([32, 100, 300])\n173\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 173 tensors\nCurrent Size of Ratings: 173 tensors\nSize of batch: torch.Size([32, 100, 300])\n174\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 174 tensors\nCurrent Size of Ratings: 174 tensors\nSize of batch: torch.Size([32, 100, 300])\n175\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 175 tensors\nCurrent Size of Ratings: 175 tensors\nSize of batch: torch.Size([32, 100, 300])\n176\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 176 tensors\nCurrent Size of Ratings: 176 tensors\nSize of batch: torch.Size([32, 100, 300])\n177\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 177 tensors\nCurrent Size of Ratings: 177 tensors\nSize of batch: torch.Size([32, 100, 300])\n178\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 178 tensors\nCurrent Size of Ratings: 178 tensors\nSize of batch: torch.Size([32, 100, 300])\n179\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 179 tensors\nCurrent Size of Ratings: 179 tensors\nSize of batch: torch.Size([32, 100, 300])\n180\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 180 tensors\nCurrent Size of Ratings: 180 tensors\nSize of batch: torch.Size([32, 100, 300])\n181\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 181 tensors\nCurrent Size of Ratings: 181 tensors\nSize of batch: torch.Size([32, 100, 300])\n182\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 182 tensors\nCurrent Size of Ratings: 182 tensors\nSize of batch: torch.Size([32, 100, 300])\n183\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 183 tensors\nCurrent Size of Ratings: 183 tensors\nSize of batch: torch.Size([32, 100, 300])\n184\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 184 tensors\nCurrent Size of Ratings: 184 tensors\nSize of batch: torch.Size([32, 100, 300])\n185\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 185 tensors\nCurrent Size of Ratings: 185 tensors\nSize of batch: torch.Size([32, 100, 300])\n186\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 186 tensors\nCurrent Size of Ratings: 186 tensors\nSize of batch: torch.Size([32, 100, 300])\n187\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 187 tensors\nCurrent Size of Ratings: 187 tensors\nSize of batch: torch.Size([32, 100, 300])\n188\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 188 tensors\nCurrent Size of Ratings: 188 tensors\nSize of batch: torch.Size([32, 100, 300])\n189\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 189 tensors\nCurrent Size of Ratings: 189 tensors\nSize of batch: torch.Size([32, 100, 300])\n190\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 190 tensors\nCurrent Size of Ratings: 190 tensors\nSize of batch: torch.Size([32, 100, 300])\n191\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 191 tensors\nCurrent Size of Ratings: 191 tensors\nSize of batch: torch.Size([32, 100, 300])\n192\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 192 tensors\nCurrent Size of Ratings: 192 tensors\nSize of batch: torch.Size([32, 100, 300])\n193\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 193 tensors\nCurrent Size of Ratings: 193 tensors\nSize of batch: torch.Size([32, 100, 300])\n194\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 194 tensors\nCurrent Size of Ratings: 194 tensors\nSize of batch: torch.Size([32, 100, 300])\n195\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 195 tensors\nCurrent Size of Ratings: 195 tensors\nSize of batch: torch.Size([32, 100, 300])\n196\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 196 tensors\nCurrent Size of Ratings: 196 tensors\nSize of batch: torch.Size([32, 100, 300])\n197\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 197 tensors\nCurrent Size of Ratings: 197 tensors\nSize of batch: torch.Size([32, 100, 300])\n198\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 198 tensors\nCurrent Size of Ratings: 198 tensors\nSize of batch: torch.Size([32, 100, 300])\n199\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 199 tensors\nCurrent Size of Ratings: 199 tensors\nSize of batch: torch.Size([32, 100, 300])\n200\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 200 tensors\nCurrent Size of Ratings: 200 tensors\nSize of batch: torch.Size([32, 100, 300])\n201\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 201 tensors\nCurrent Size of Ratings: 201 tensors\nSize of batch: torch.Size([32, 100, 300])\n202\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 202 tensors\nCurrent Size of Ratings: 202 tensors\nSize of batch: torch.Size([32, 100, 300])\n203\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 203 tensors\nCurrent Size of Ratings: 203 tensors\nSize of batch: torch.Size([32, 100, 300])\n204\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 204 tensors\nCurrent Size of Ratings: 204 tensors\nSize of batch: torch.Size([32, 100, 300])\n205\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 205 tensors\nCurrent Size of Ratings: 205 tensors\nSize of batch: torch.Size([32, 100, 300])\n206\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 206 tensors\nCurrent Size of Ratings: 206 tensors\nSize of batch: torch.Size([32, 100, 300])\n207\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 207 tensors\nCurrent Size of Ratings: 207 tensors\nSize of batch: torch.Size([32, 100, 300])\n208\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 208 tensors\nCurrent Size of Ratings: 208 tensors\nSize of batch: torch.Size([32, 100, 300])\n209\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 209 tensors\nCurrent Size of Ratings: 209 tensors\nSize of batch: torch.Size([32, 100, 300])\n210\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 210 tensors\nCurrent Size of Ratings: 210 tensors\nSize of batch: torch.Size([32, 100, 300])\n211\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 211 tensors\nCurrent Size of Ratings: 211 tensors\nSize of batch: torch.Size([32, 100, 300])\n212\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 212 tensors\nCurrent Size of Ratings: 212 tensors\nSize of batch: torch.Size([32, 100, 300])\n213\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 213 tensors\nCurrent Size of Ratings: 213 tensors\nSize of batch: torch.Size([32, 100, 300])\n214\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 214 tensors\nCurrent Size of Ratings: 214 tensors\nSize of batch: torch.Size([32, 100, 300])\n215\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 215 tensors\nCurrent Size of Ratings: 215 tensors\nSize of batch: torch.Size([32, 100, 300])\n216\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 216 tensors\nCurrent Size of Ratings: 216 tensors\nSize of batch: torch.Size([32, 100, 300])\n217\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 217 tensors\nCurrent Size of Ratings: 217 tensors\nSize of batch: torch.Size([32, 100, 300])\n218\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 218 tensors\nCurrent Size of Ratings: 218 tensors\nSize of batch: torch.Size([32, 100, 300])\n219\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 219 tensors\nCurrent Size of Ratings: 219 tensors\nSize of batch: torch.Size([32, 100, 300])\n220\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 220 tensors\nCurrent Size of Ratings: 220 tensors\nSize of batch: torch.Size([32, 100, 300])\n221\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 221 tensors\nCurrent Size of Ratings: 221 tensors\nSize of batch: torch.Size([32, 100, 300])\n222\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 222 tensors\nCurrent Size of Ratings: 222 tensors\nSize of batch: torch.Size([32, 100, 300])\n223\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 223 tensors\nCurrent Size of Ratings: 223 tensors\nSize of batch: torch.Size([32, 100, 300])\n224\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 224 tensors\nCurrent Size of Ratings: 224 tensors\nSize of batch: torch.Size([32, 100, 300])\n225\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 225 tensors\nCurrent Size of Ratings: 225 tensors\nSize of batch: torch.Size([32, 100, 300])\n226\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 226 tensors\nCurrent Size of Ratings: 226 tensors\nSize of batch: torch.Size([32, 100, 300])\n227\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 227 tensors\nCurrent Size of Ratings: 227 tensors\nSize of batch: torch.Size([32, 100, 300])\n228\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 228 tensors\nCurrent Size of Ratings: 228 tensors\nSize of batch: torch.Size([32, 100, 300])\n229\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 229 tensors\nCurrent Size of Ratings: 229 tensors\nSize of batch: torch.Size([32, 100, 300])\n230\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 230 tensors\nCurrent Size of Ratings: 230 tensors\nSize of batch: torch.Size([32, 100, 300])\n231\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 231 tensors\nCurrent Size of Ratings: 231 tensors\nSize of batch: torch.Size([32, 100, 300])\n232\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 232 tensors\nCurrent Size of Ratings: 232 tensors\nSize of batch: torch.Size([32, 100, 300])\n233\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 233 tensors\nCurrent Size of Ratings: 233 tensors\nSize of batch: torch.Size([32, 100, 300])\n234\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 234 tensors\nCurrent Size of Ratings: 234 tensors\nSize of batch: torch.Size([32, 100, 300])\n235\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 235 tensors\nCurrent Size of Ratings: 235 tensors\nSize of batch: torch.Size([32, 100, 300])\n236\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 236 tensors\nCurrent Size of Ratings: 236 tensors\nSize of batch: torch.Size([32, 100, 300])\n237\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 237 tensors\nCurrent Size of Ratings: 237 tensors\nSize of batch: torch.Size([32, 100, 300])\n238\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 238 tensors\nCurrent Size of Ratings: 238 tensors\nSize of batch: torch.Size([32, 100, 300])\n239\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 239 tensors\nCurrent Size of Ratings: 239 tensors\nSize of batch: torch.Size([32, 100, 300])\n240\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 240 tensors\nCurrent Size of Ratings: 240 tensors\nSize of batch: torch.Size([32, 100, 300])\n241\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 241 tensors\nCurrent Size of Ratings: 241 tensors\nSize of batch: torch.Size([32, 100, 300])\n242\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 242 tensors\nCurrent Size of Ratings: 242 tensors\nSize of batch: torch.Size([32, 100, 300])\n243\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 243 tensors\nCurrent Size of Ratings: 243 tensors\nSize of batch: torch.Size([32, 100, 300])\n244\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 244 tensors\nCurrent Size of Ratings: 244 tensors\nSize of batch: torch.Size([32, 100, 300])\n245\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 245 tensors\nCurrent Size of Ratings: 245 tensors\nSize of batch: torch.Size([32, 100, 300])\n246\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 246 tensors\nCurrent Size of Ratings: 246 tensors\nSize of batch: torch.Size([32, 100, 300])\n247\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 247 tensors\nCurrent Size of Ratings: 247 tensors\nSize of batch: torch.Size([32, 100, 300])\n248\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 248 tensors\nCurrent Size of Ratings: 248 tensors\nSize of batch: torch.Size([32, 100, 300])\n249\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 249 tensors\nCurrent Size of Ratings: 249 tensors\nSize of batch: torch.Size([32, 100, 300])\n250\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 250 tensors\nCurrent Size of Ratings: 250 tensors\nSize of batch: torch.Size([32, 100, 300])\n251\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 251 tensors\nCurrent Size of Ratings: 251 tensors\nSize of batch: torch.Size([32, 100, 300])\n252\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 252 tensors\nCurrent Size of Ratings: 252 tensors\nSize of batch: torch.Size([32, 100, 300])\n253\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 253 tensors\nCurrent Size of Ratings: 253 tensors\nSize of batch: torch.Size([32, 100, 300])\n254\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 254 tensors\nCurrent Size of Ratings: 254 tensors\nSize of batch: torch.Size([32, 100, 300])\n255\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 255 tensors\nCurrent Size of Ratings: 255 tensors\nSize of batch: torch.Size([32, 100, 300])\n256\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 256 tensors\nCurrent Size of Ratings: 256 tensors\nSize of batch: torch.Size([32, 100, 300])\n257\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 257 tensors\nCurrent Size of Ratings: 257 tensors\nSize of batch: torch.Size([32, 100, 300])\n258\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 258 tensors\nCurrent Size of Ratings: 258 tensors\nSize of batch: torch.Size([32, 100, 300])\n259\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 259 tensors\nCurrent Size of Ratings: 259 tensors\nSize of batch: torch.Size([32, 100, 300])\n260\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 260 tensors\nCurrent Size of Ratings: 260 tensors\nSize of batch: torch.Size([32, 100, 300])\n261\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 261 tensors\nCurrent Size of Ratings: 261 tensors\nSize of batch: torch.Size([32, 100, 300])\n262\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 262 tensors\nCurrent Size of Ratings: 262 tensors\nSize of batch: torch.Size([32, 100, 300])\n263\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 263 tensors\nCurrent Size of Ratings: 263 tensors\nSize of batch: torch.Size([32, 100, 300])\n264\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 264 tensors\nCurrent Size of Ratings: 264 tensors\nSize of batch: torch.Size([32, 100, 300])\n265\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 265 tensors\nCurrent Size of Ratings: 265 tensors\nSize of batch: torch.Size([32, 100, 300])\n266\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 266 tensors\nCurrent Size of Ratings: 266 tensors\nSize of batch: torch.Size([32, 100, 300])\n267\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 267 tensors\nCurrent Size of Ratings: 267 tensors\nSize of batch: torch.Size([32, 100, 300])\n268\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 268 tensors\nCurrent Size of Ratings: 268 tensors\nSize of batch: torch.Size([32, 100, 300])\n269\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 269 tensors\nCurrent Size of Ratings: 269 tensors\nSize of batch: torch.Size([32, 100, 300])\n270\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 270 tensors\nCurrent Size of Ratings: 270 tensors\nSize of batch: torch.Size([32, 100, 300])\n271\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 271 tensors\nCurrent Size of Ratings: 271 tensors\nSize of batch: torch.Size([32, 100, 300])\n272\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 272 tensors\nCurrent Size of Ratings: 272 tensors\nSize of batch: torch.Size([32, 100, 300])\n273\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 273 tensors\nCurrent Size of Ratings: 273 tensors\nSize of batch: torch.Size([32, 100, 300])\n274\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 274 tensors\nCurrent Size of Ratings: 274 tensors\nSize of batch: torch.Size([32, 100, 300])\n275\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 275 tensors\nCurrent Size of Ratings: 275 tensors\nSize of batch: torch.Size([32, 100, 300])\n276\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 276 tensors\nCurrent Size of Ratings: 276 tensors\nSize of batch: torch.Size([32, 100, 300])\n277\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 277 tensors\nCurrent Size of Ratings: 277 tensors\nSize of batch: torch.Size([32, 100, 300])\n278\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 278 tensors\nCurrent Size of Ratings: 278 tensors\nSize of batch: torch.Size([32, 100, 300])\n279\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 279 tensors\nCurrent Size of Ratings: 279 tensors\nSize of batch: torch.Size([32, 100, 300])\n280\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 280 tensors\nCurrent Size of Ratings: 280 tensors\nSize of batch: torch.Size([32, 100, 300])\n281\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 281 tensors\nCurrent Size of Ratings: 281 tensors\nSize of batch: torch.Size([32, 100, 300])\n282\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 282 tensors\nCurrent Size of Ratings: 282 tensors\nSize of batch: torch.Size([32, 100, 300])\n283\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 283 tensors\nCurrent Size of Ratings: 283 tensors\nSize of batch: torch.Size([32, 100, 300])\n284\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 284 tensors\nCurrent Size of Ratings: 284 tensors\nSize of batch: torch.Size([32, 100, 300])\n285\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 285 tensors\nCurrent Size of Ratings: 285 tensors\nSize of batch: torch.Size([32, 100, 300])\n286\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 286 tensors\nCurrent Size of Ratings: 286 tensors\nSize of batch: torch.Size([32, 100, 300])\n287\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 287 tensors\nCurrent Size of Ratings: 287 tensors\nSize of batch: torch.Size([32, 100, 300])\n288\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 288 tensors\nCurrent Size of Ratings: 288 tensors\nSize of batch: torch.Size([32, 100, 300])\n289\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 289 tensors\nCurrent Size of Ratings: 289 tensors\nSize of batch: torch.Size([32, 100, 300])\n290\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 290 tensors\nCurrent Size of Ratings: 290 tensors\nSize of batch: torch.Size([32, 100, 300])\n291\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 291 tensors\nCurrent Size of Ratings: 291 tensors\nSize of batch: torch.Size([32, 100, 300])\n292\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 292 tensors\nCurrent Size of Ratings: 292 tensors\nSize of batch: torch.Size([32, 100, 300])\n293\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 293 tensors\nCurrent Size of Ratings: 293 tensors\nSize of batch: torch.Size([32, 100, 300])\n294\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 294 tensors\nCurrent Size of Ratings: 294 tensors\nSize of batch: torch.Size([32, 100, 300])\n295\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 295 tensors\nCurrent Size of Ratings: 295 tensors\nSize of batch: torch.Size([32, 100, 300])\n296\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 296 tensors\nCurrent Size of Ratings: 296 tensors\nSize of batch: torch.Size([32, 100, 300])\n297\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 297 tensors\nCurrent Size of Ratings: 297 tensors\nSize of batch: torch.Size([32, 100, 300])\n298\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 298 tensors\nCurrent Size of Ratings: 298 tensors\nSize of batch: torch.Size([32, 100, 300])\n299\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 299 tensors\nCurrent Size of Ratings: 299 tensors\nSize of batch: torch.Size([32, 100, 300])\n300\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 300 tensors\nCurrent Size of Ratings: 300 tensors\nSize of batch: torch.Size([32, 100, 300])\n301\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 301 tensors\nCurrent Size of Ratings: 301 tensors\nSize of batch: torch.Size([32, 100, 300])\n302\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 302 tensors\nCurrent Size of Ratings: 302 tensors\nSize of batch: torch.Size([32, 100, 300])\n303\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 303 tensors\nCurrent Size of Ratings: 303 tensors\nSize of batch: torch.Size([32, 100, 300])\n304\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 304 tensors\nCurrent Size of Ratings: 304 tensors\nSize of batch: torch.Size([32, 100, 300])\n305\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 305 tensors\nCurrent Size of Ratings: 305 tensors\nSize of batch: torch.Size([32, 100, 300])\n306\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 306 tensors\nCurrent Size of Ratings: 306 tensors\nSize of batch: torch.Size([32, 100, 300])\n307\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 307 tensors\nCurrent Size of Ratings: 307 tensors\nSize of batch: torch.Size([32, 100, 300])\n308\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 308 tensors\nCurrent Size of Ratings: 308 tensors\nSize of batch: torch.Size([32, 100, 300])\n309\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 309 tensors\nCurrent Size of Ratings: 309 tensors\nSize of batch: torch.Size([32, 100, 300])\n310\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 310 tensors\nCurrent Size of Ratings: 310 tensors\nSize of batch: torch.Size([32, 100, 300])\n311\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 311 tensors\nCurrent Size of Ratings: 311 tensors\nSize of batch: torch.Size([32, 100, 300])\n312\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 312 tensors\nCurrent Size of Ratings: 312 tensors\nSize of batch: torch.Size([32, 100, 300])\n313\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 313 tensors\nCurrent Size of Ratings: 313 tensors\nSize of batch: torch.Size([32, 100, 300])\n314\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 314 tensors\nCurrent Size of Ratings: 314 tensors\nSize of batch: torch.Size([32, 100, 300])\n315\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 315 tensors\nCurrent Size of Ratings: 315 tensors\nSize of batch: torch.Size([32, 100, 300])\n316\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 316 tensors\nCurrent Size of Ratings: 316 tensors\nSize of batch: torch.Size([32, 100, 300])\n317\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 317 tensors\nCurrent Size of Ratings: 317 tensors\nSize of batch: torch.Size([32, 100, 300])\n318\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 318 tensors\nCurrent Size of Ratings: 318 tensors\nSize of batch: torch.Size([32, 100, 300])\n319\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 319 tensors\nCurrent Size of Ratings: 319 tensors\nSize of batch: torch.Size([32, 100, 300])\n320\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 320 tensors\nCurrent Size of Ratings: 320 tensors\nSize of batch: torch.Size([32, 100, 300])\n321\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 321 tensors\nCurrent Size of Ratings: 321 tensors\nSize of batch: torch.Size([32, 100, 300])\n322\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 322 tensors\nCurrent Size of Ratings: 322 tensors\nSize of batch: torch.Size([32, 100, 300])\n323\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 323 tensors\nCurrent Size of Ratings: 323 tensors\nSize of batch: torch.Size([32, 100, 300])\n324\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 324 tensors\nCurrent Size of Ratings: 324 tensors\nSize of batch: torch.Size([32, 100, 300])\n325\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 325 tensors\nCurrent Size of Ratings: 325 tensors\nSize of batch: torch.Size([32, 100, 300])\n326\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 326 tensors\nCurrent Size of Ratings: 326 tensors\nSize of batch: torch.Size([32, 100, 300])\n327\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 327 tensors\nCurrent Size of Ratings: 327 tensors\nSize of batch: torch.Size([32, 100, 300])\n328\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 328 tensors\nCurrent Size of Ratings: 328 tensors\nSize of batch: torch.Size([32, 100, 300])\n329\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 329 tensors\nCurrent Size of Ratings: 329 tensors\nSize of batch: torch.Size([32, 100, 300])\n330\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 330 tensors\nCurrent Size of Ratings: 330 tensors\nSize of batch: torch.Size([32, 100, 300])\n331\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 331 tensors\nCurrent Size of Ratings: 331 tensors\nSize of batch: torch.Size([32, 100, 300])\n332\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 332 tensors\nCurrent Size of Ratings: 332 tensors\nSize of batch: torch.Size([32, 100, 300])\n333\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 333 tensors\nCurrent Size of Ratings: 333 tensors\nSize of batch: torch.Size([32, 100, 300])\n334\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 334 tensors\nCurrent Size of Ratings: 334 tensors\nSize of batch: torch.Size([32, 100, 300])\n335\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 335 tensors\nCurrent Size of Ratings: 335 tensors\nSize of batch: torch.Size([32, 100, 300])\n336\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 336 tensors\nCurrent Size of Ratings: 336 tensors\nSize of batch: torch.Size([32, 100, 300])\n337\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 337 tensors\nCurrent Size of Ratings: 337 tensors\nSize of batch: torch.Size([32, 100, 300])\n338\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 338 tensors\nCurrent Size of Ratings: 338 tensors\nSize of batch: torch.Size([32, 100, 300])\n339\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 339 tensors\nCurrent Size of Ratings: 339 tensors\nSize of batch: torch.Size([32, 100, 300])\n340\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 340 tensors\nCurrent Size of Ratings: 340 tensors\nSize of batch: torch.Size([32, 100, 300])\n341\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 341 tensors\nCurrent Size of Ratings: 341 tensors\nSize of batch: torch.Size([32, 100, 300])\n342\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 342 tensors\nCurrent Size of Ratings: 342 tensors\nSize of batch: torch.Size([32, 100, 300])\n343\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 343 tensors\nCurrent Size of Ratings: 343 tensors\nSize of batch: torch.Size([32, 100, 300])\n344\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 344 tensors\nCurrent Size of Ratings: 344 tensors\nSize of batch: torch.Size([32, 100, 300])\n345\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 345 tensors\nCurrent Size of Ratings: 345 tensors\nSize of batch: torch.Size([32, 100, 300])\n346\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 346 tensors\nCurrent Size of Ratings: 346 tensors\nSize of batch: torch.Size([32, 100, 300])\n347\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 347 tensors\nCurrent Size of Ratings: 347 tensors\nSize of batch: torch.Size([32, 100, 300])\n348\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 348 tensors\nCurrent Size of Ratings: 348 tensors\nSize of batch: torch.Size([32, 100, 300])\n349\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 349 tensors\nCurrent Size of Ratings: 349 tensors\nSize of batch: torch.Size([32, 100, 300])\n350\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 350 tensors\nCurrent Size of Ratings: 350 tensors\nSize of batch: torch.Size([32, 100, 300])\n351\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 351 tensors\nCurrent Size of Ratings: 351 tensors\nSize of batch: torch.Size([32, 100, 300])\n352\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 352 tensors\nCurrent Size of Ratings: 352 tensors\nSize of batch: torch.Size([32, 100, 300])\n353\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 353 tensors\nCurrent Size of Ratings: 353 tensors\nSize of batch: torch.Size([32, 100, 300])\n354\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 354 tensors\nCurrent Size of Ratings: 354 tensors\nSize of batch: torch.Size([32, 100, 300])\n355\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 355 tensors\nCurrent Size of Ratings: 355 tensors\nSize of batch: torch.Size([32, 100, 300])\n356\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 356 tensors\nCurrent Size of Ratings: 356 tensors\nSize of batch: torch.Size([32, 100, 300])\n357\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 357 tensors\nCurrent Size of Ratings: 357 tensors\nSize of batch: torch.Size([32, 100, 300])\n358\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 358 tensors\nCurrent Size of Ratings: 358 tensors\nSize of batch: torch.Size([32, 100, 300])\n359\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 359 tensors\nCurrent Size of Ratings: 359 tensors\nSize of batch: torch.Size([32, 100, 300])\n360\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 360 tensors\nCurrent Size of Ratings: 360 tensors\nSize of batch: torch.Size([32, 100, 300])\n361\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 361 tensors\nCurrent Size of Ratings: 361 tensors\nSize of batch: torch.Size([32, 100, 300])\n362\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 362 tensors\nCurrent Size of Ratings: 362 tensors\nSize of batch: torch.Size([32, 100, 300])\n363\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 363 tensors\nCurrent Size of Ratings: 363 tensors\nSize of batch: torch.Size([32, 100, 300])\n364\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 364 tensors\nCurrent Size of Ratings: 364 tensors\nSize of batch: torch.Size([32, 100, 300])\n365\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 365 tensors\nCurrent Size of Ratings: 365 tensors\nSize of batch: torch.Size([32, 100, 300])\n366\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 366 tensors\nCurrent Size of Ratings: 366 tensors\nSize of batch: torch.Size([32, 100, 300])\n367\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 367 tensors\nCurrent Size of Ratings: 367 tensors\nSize of batch: torch.Size([32, 100, 300])\n368\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 368 tensors\nCurrent Size of Ratings: 368 tensors\nSize of batch: torch.Size([32, 100, 300])\n369\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 369 tensors\nCurrent Size of Ratings: 369 tensors\nSize of batch: torch.Size([32, 100, 300])\n370\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 370 tensors\nCurrent Size of Ratings: 370 tensors\nSize of batch: torch.Size([32, 100, 300])\n371\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 371 tensors\nCurrent Size of Ratings: 371 tensors\nSize of batch: torch.Size([32, 100, 300])\n372\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 372 tensors\nCurrent Size of Ratings: 372 tensors\nSize of batch: torch.Size([32, 100, 300])\n373\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 373 tensors\nCurrent Size of Ratings: 373 tensors\nSize of batch: torch.Size([32, 100, 300])\n374\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 374 tensors\nCurrent Size of Ratings: 374 tensors\nSize of batch: torch.Size([32, 100, 300])\n375\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 375 tensors\nCurrent Size of Ratings: 375 tensors\nSize of batch: torch.Size([32, 100, 300])\n376\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 376 tensors\nCurrent Size of Ratings: 376 tensors\nSize of batch: torch.Size([32, 100, 300])\n377\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 377 tensors\nCurrent Size of Ratings: 377 tensors\nSize of batch: torch.Size([32, 100, 300])\n378\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 378 tensors\nCurrent Size of Ratings: 378 tensors\nSize of batch: torch.Size([32, 100, 300])\n379\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 379 tensors\nCurrent Size of Ratings: 379 tensors\nSize of batch: torch.Size([32, 100, 300])\n380\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 380 tensors\nCurrent Size of Ratings: 380 tensors\nSize of batch: torch.Size([32, 100, 300])\n381\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 381 tensors\nCurrent Size of Ratings: 381 tensors\nSize of batch: torch.Size([32, 100, 300])\n382\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 382 tensors\nCurrent Size of Ratings: 382 tensors\nSize of batch: torch.Size([32, 100, 300])\n383\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 383 tensors\nCurrent Size of Ratings: 383 tensors\nSize of batch: torch.Size([32, 100, 300])\n384\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 384 tensors\nCurrent Size of Ratings: 384 tensors\nSize of batch: torch.Size([32, 100, 300])\n385\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 385 tensors\nCurrent Size of Ratings: 385 tensors\nSize of batch: torch.Size([32, 100, 300])\n386\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 386 tensors\nCurrent Size of Ratings: 386 tensors\nSize of batch: torch.Size([32, 100, 300])\n387\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 387 tensors\nCurrent Size of Ratings: 387 tensors\nSize of batch: torch.Size([32, 100, 300])\n388\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 388 tensors\nCurrent Size of Ratings: 388 tensors\nSize of batch: torch.Size([32, 100, 300])\n389\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 389 tensors\nCurrent Size of Ratings: 389 tensors\nSize of batch: torch.Size([32, 100, 300])\n390\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 390 tensors\nCurrent Size of Ratings: 390 tensors\nSize of batch: torch.Size([32, 100, 300])\n391\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 391 tensors\nCurrent Size of Ratings: 391 tensors\nSize of batch: torch.Size([32, 100, 300])\n392\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 392 tensors\nCurrent Size of Ratings: 392 tensors\nSize of batch: torch.Size([32, 100, 300])\n393\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 393 tensors\nCurrent Size of Ratings: 393 tensors\nSize of batch: torch.Size([32, 100, 300])\n394\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 394 tensors\nCurrent Size of Ratings: 394 tensors\nSize of batch: torch.Size([32, 100, 300])\n395\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 395 tensors\nCurrent Size of Ratings: 395 tensors\nSize of batch: torch.Size([32, 100, 300])\n396\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 396 tensors\nCurrent Size of Ratings: 396 tensors\nSize of batch: torch.Size([32, 100, 300])\n397\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 397 tensors\nCurrent Size of Ratings: 397 tensors\nSize of batch: torch.Size([32, 100, 300])\n398\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 398 tensors\nCurrent Size of Ratings: 398 tensors\nSize of batch: torch.Size([32, 100, 300])\n399\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 399 tensors\nCurrent Size of Ratings: 399 tensors\nSize of batch: torch.Size([32, 100, 300])\n400\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 400 tensors\nCurrent Size of Ratings: 400 tensors\nSize of batch: torch.Size([32, 100, 300])\n401\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 401 tensors\nCurrent Size of Ratings: 401 tensors\nSize of batch: torch.Size([32, 100, 300])\n402\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 402 tensors\nCurrent Size of Ratings: 402 tensors\nSize of batch: torch.Size([32, 100, 300])\n403\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 403 tensors\nCurrent Size of Ratings: 403 tensors\nSize of batch: torch.Size([32, 100, 300])\n404\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 404 tensors\nCurrent Size of Ratings: 404 tensors\nSize of batch: torch.Size([32, 100, 300])\n405\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 405 tensors\nCurrent Size of Ratings: 405 tensors\nSize of batch: torch.Size([32, 100, 300])\n406\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 406 tensors\nCurrent Size of Ratings: 406 tensors\nSize of batch: torch.Size([32, 100, 300])\n407\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 407 tensors\nCurrent Size of Ratings: 407 tensors\nSize of batch: torch.Size([32, 100, 300])\n408\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 408 tensors\nCurrent Size of Ratings: 408 tensors\nSize of batch: torch.Size([32, 100, 300])\n409\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 409 tensors\nCurrent Size of Ratings: 409 tensors\nSize of batch: torch.Size([32, 100, 300])\n410\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 410 tensors\nCurrent Size of Ratings: 410 tensors\nSize of batch: torch.Size([32, 100, 300])\n411\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 411 tensors\nCurrent Size of Ratings: 411 tensors\nSize of batch: torch.Size([32, 100, 300])\n412\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 412 tensors\nCurrent Size of Ratings: 412 tensors\nSize of batch: torch.Size([32, 100, 300])\n413\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 413 tensors\nCurrent Size of Ratings: 413 tensors\nSize of batch: torch.Size([32, 100, 300])\n414\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 414 tensors\nCurrent Size of Ratings: 414 tensors\nSize of batch: torch.Size([32, 100, 300])\n415\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 415 tensors\nCurrent Size of Ratings: 415 tensors\nSize of batch: torch.Size([32, 100, 300])\n416\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 416 tensors\nCurrent Size of Ratings: 416 tensors\nSize of batch: torch.Size([32, 100, 300])\n417\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 417 tensors\nCurrent Size of Ratings: 417 tensors\nSize of batch: torch.Size([32, 100, 300])\n418\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 418 tensors\nCurrent Size of Ratings: 418 tensors\nSize of batch: torch.Size([32, 100, 300])\n419\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 419 tensors\nCurrent Size of Ratings: 419 tensors\nSize of batch: torch.Size([32, 100, 300])\n420\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 420 tensors\nCurrent Size of Ratings: 420 tensors\nSize of batch: torch.Size([32, 100, 300])\n421\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 421 tensors\nCurrent Size of Ratings: 421 tensors\nSize of batch: torch.Size([32, 100, 300])\n422\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 422 tensors\nCurrent Size of Ratings: 422 tensors\nSize of batch: torch.Size([32, 100, 300])\n423\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 423 tensors\nCurrent Size of Ratings: 423 tensors\nSize of batch: torch.Size([32, 100, 300])\n424\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 424 tensors\nCurrent Size of Ratings: 424 tensors\nSize of batch: torch.Size([32, 100, 300])\n425\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 425 tensors\nCurrent Size of Ratings: 425 tensors\nSize of batch: torch.Size([32, 100, 300])\n426\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 426 tensors\nCurrent Size of Ratings: 426 tensors\nSize of batch: torch.Size([32, 100, 300])\n427\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 427 tensors\nCurrent Size of Ratings: 427 tensors\nSize of batch: torch.Size([32, 100, 300])\n428\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 428 tensors\nCurrent Size of Ratings: 428 tensors\nSize of batch: torch.Size([32, 100, 300])\n429\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 429 tensors\nCurrent Size of Ratings: 429 tensors\nSize of batch: torch.Size([32, 100, 300])\n430\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 430 tensors\nCurrent Size of Ratings: 430 tensors\nSize of batch: torch.Size([32, 100, 300])\n431\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 431 tensors\nCurrent Size of Ratings: 431 tensors\nSize of batch: torch.Size([32, 100, 300])\n432\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 432 tensors\nCurrent Size of Ratings: 432 tensors\nSize of batch: torch.Size([32, 100, 300])\n433\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 433 tensors\nCurrent Size of Ratings: 433 tensors\nSize of batch: torch.Size([32, 100, 300])\n434\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 434 tensors\nCurrent Size of Ratings: 434 tensors\nSize of batch: torch.Size([32, 100, 300])\n435\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 435 tensors\nCurrent Size of Ratings: 435 tensors\nSize of batch: torch.Size([32, 100, 300])\n436\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 436 tensors\nCurrent Size of Ratings: 436 tensors\nSize of batch: torch.Size([32, 100, 300])\n437\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 437 tensors\nCurrent Size of Ratings: 437 tensors\nSize of batch: torch.Size([32, 100, 300])\n438\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 438 tensors\nCurrent Size of Ratings: 438 tensors\nSize of batch: torch.Size([32, 100, 300])\n439\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 439 tensors\nCurrent Size of Ratings: 439 tensors\nSize of batch: torch.Size([32, 100, 300])\n440\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 440 tensors\nCurrent Size of Ratings: 440 tensors\nSize of batch: torch.Size([32, 100, 300])\n441\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 441 tensors\nCurrent Size of Ratings: 441 tensors\nSize of batch: torch.Size([32, 100, 300])\n442\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 442 tensors\nCurrent Size of Ratings: 442 tensors\nSize of batch: torch.Size([32, 100, 300])\n443\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 443 tensors\nCurrent Size of Ratings: 443 tensors\nSize of batch: torch.Size([32, 100, 300])\n444\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 444 tensors\nCurrent Size of Ratings: 444 tensors\nSize of batch: torch.Size([32, 100, 300])\n445\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 445 tensors\nCurrent Size of Ratings: 445 tensors\nSize of batch: torch.Size([32, 100, 300])\n446\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 446 tensors\nCurrent Size of Ratings: 446 tensors\nSize of batch: torch.Size([32, 100, 300])\n447\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 447 tensors\nCurrent Size of Ratings: 447 tensors\nSize of batch: torch.Size([32, 100, 300])\n448\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 448 tensors\nCurrent Size of Ratings: 448 tensors\nSize of batch: torch.Size([32, 100, 300])\n449\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 449 tensors\nCurrent Size of Ratings: 449 tensors\nSize of batch: torch.Size([32, 100, 300])\n450\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 450 tensors\nCurrent Size of Ratings: 450 tensors\nSize of batch: torch.Size([32, 100, 300])\n451\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 451 tensors\nCurrent Size of Ratings: 451 tensors\nSize of batch: torch.Size([32, 100, 300])\n452\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 452 tensors\nCurrent Size of Ratings: 452 tensors\nSize of batch: torch.Size([32, 100, 300])\n453\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 453 tensors\nCurrent Size of Ratings: 453 tensors\nSize of batch: torch.Size([32, 100, 300])\n454\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 454 tensors\nCurrent Size of Ratings: 454 tensors\nSize of batch: torch.Size([32, 100, 300])\n455\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 455 tensors\nCurrent Size of Ratings: 455 tensors\nSize of batch: torch.Size([32, 100, 300])\n456\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 456 tensors\nCurrent Size of Ratings: 456 tensors\nSize of batch: torch.Size([32, 100, 300])\n457\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 457 tensors\nCurrent Size of Ratings: 457 tensors\nSize of batch: torch.Size([32, 100, 300])\n458\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 458 tensors\nCurrent Size of Ratings: 458 tensors\nSize of batch: torch.Size([32, 100, 300])\n459\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 459 tensors\nCurrent Size of Ratings: 459 tensors\nSize of batch: torch.Size([32, 100, 300])\n460\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 460 tensors\nCurrent Size of Ratings: 460 tensors\nSize of batch: torch.Size([32, 100, 300])\n461\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 461 tensors\nCurrent Size of Ratings: 461 tensors\nSize of batch: torch.Size([32, 100, 300])\n462\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 462 tensors\nCurrent Size of Ratings: 462 tensors\nSize of batch: torch.Size([32, 100, 300])\n463\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 463 tensors\nCurrent Size of Ratings: 463 tensors\nSize of batch: torch.Size([32, 100, 300])\n464\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 464 tensors\nCurrent Size of Ratings: 464 tensors\nSize of batch: torch.Size([32, 100, 300])\n465\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 465 tensors\nCurrent Size of Ratings: 465 tensors\nSize of batch: torch.Size([32, 100, 300])\n466\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 466 tensors\nCurrent Size of Ratings: 466 tensors\nSize of batch: torch.Size([32, 100, 300])\n467\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 467 tensors\nCurrent Size of Ratings: 467 tensors\nSize of batch: torch.Size([32, 100, 300])\n468\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 468 tensors\nCurrent Size of Ratings: 468 tensors\nSize of batch: torch.Size([32, 100, 300])\n469\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 469 tensors\nCurrent Size of Ratings: 469 tensors\nSize of batch: torch.Size([32, 100, 300])\n470\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 470 tensors\nCurrent Size of Ratings: 470 tensors\nSize of batch: torch.Size([32, 100, 300])\n471\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 471 tensors\nCurrent Size of Ratings: 471 tensors\nSize of batch: torch.Size([32, 100, 300])\n472\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 472 tensors\nCurrent Size of Ratings: 472 tensors\nSize of batch: torch.Size([32, 100, 300])\n473\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 473 tensors\nCurrent Size of Ratings: 473 tensors\nSize of batch: torch.Size([32, 100, 300])\n474\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 474 tensors\nCurrent Size of Ratings: 474 tensors\nSize of batch: torch.Size([32, 100, 300])\n475\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 475 tensors\nCurrent Size of Ratings: 475 tensors\nSize of batch: torch.Size([32, 100, 300])\n476\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 476 tensors\nCurrent Size of Ratings: 476 tensors\nSize of batch: torch.Size([32, 100, 300])\n477\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 477 tensors\nCurrent Size of Ratings: 477 tensors\nSize of batch: torch.Size([32, 100, 300])\n478\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 478 tensors\nCurrent Size of Ratings: 478 tensors\nSize of batch: torch.Size([32, 100, 300])\n479\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 479 tensors\nCurrent Size of Ratings: 479 tensors\nSize of batch: torch.Size([32, 100, 300])\n480\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 480 tensors\nCurrent Size of Ratings: 480 tensors\nSize of batch: torch.Size([32, 100, 300])\n481\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 481 tensors\nCurrent Size of Ratings: 481 tensors\nSize of batch: torch.Size([32, 100, 300])\n482\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 482 tensors\nCurrent Size of Ratings: 482 tensors\nSize of batch: torch.Size([32, 100, 300])\n483\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 483 tensors\nCurrent Size of Ratings: 483 tensors\nSize of batch: torch.Size([32, 100, 300])\n484\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 484 tensors\nCurrent Size of Ratings: 484 tensors\nSize of batch: torch.Size([32, 100, 300])\n485\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 485 tensors\nCurrent Size of Ratings: 485 tensors\nSize of batch: torch.Size([32, 100, 300])\n486\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 486 tensors\nCurrent Size of Ratings: 486 tensors\nSize of batch: torch.Size([32, 100, 300])\n487\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 487 tensors\nCurrent Size of Ratings: 487 tensors\nSize of batch: torch.Size([32, 100, 300])\n488\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 488 tensors\nCurrent Size of Ratings: 488 tensors\nSize of batch: torch.Size([32, 100, 300])\n489\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 489 tensors\nCurrent Size of Ratings: 489 tensors\nSize of batch: torch.Size([32, 100, 300])\n490\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 490 tensors\nCurrent Size of Ratings: 490 tensors\nSize of batch: torch.Size([32, 100, 300])\n491\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 491 tensors\nCurrent Size of Ratings: 491 tensors\nSize of batch: torch.Size([32, 100, 300])\n492\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 492 tensors\nCurrent Size of Ratings: 492 tensors\nSize of batch: torch.Size([32, 100, 300])\n493\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 493 tensors\nCurrent Size of Ratings: 493 tensors\nSize of batch: torch.Size([32, 100, 300])\n494\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 494 tensors\nCurrent Size of Ratings: 494 tensors\nSize of batch: torch.Size([32, 100, 300])\n495\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 495 tensors\nCurrent Size of Ratings: 495 tensors\nSize of batch: torch.Size([32, 100, 300])\n496\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 496 tensors\nCurrent Size of Ratings: 496 tensors\nSize of batch: torch.Size([32, 100, 300])\n497\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 497 tensors\nCurrent Size of Ratings: 497 tensors\nSize of batch: torch.Size([32, 100, 300])\n498\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 498 tensors\nCurrent Size of Ratings: 498 tensors\nSize of batch: torch.Size([32, 100, 300])\n499\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 499 tensors\nCurrent Size of Ratings: 499 tensors\nSize of batch: torch.Size([32, 100, 300])\n500\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 500 tensors\nCurrent Size of Ratings: 500 tensors\nSize of batch: torch.Size([32, 100, 300])\n501\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 501 tensors\nCurrent Size of Ratings: 501 tensors\nSize of batch: torch.Size([32, 100, 300])\n502\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 502 tensors\nCurrent Size of Ratings: 502 tensors\nSize of batch: torch.Size([32, 100, 300])\n503\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 503 tensors\nCurrent Size of Ratings: 503 tensors\nSize of batch: torch.Size([32, 100, 300])\n504\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 504 tensors\nCurrent Size of Ratings: 504 tensors\nSize of batch: torch.Size([32, 100, 300])\n505\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 505 tensors\nCurrent Size of Ratings: 505 tensors\nSize of batch: torch.Size([32, 100, 300])\n506\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 506 tensors\nCurrent Size of Ratings: 506 tensors\nSize of batch: torch.Size([32, 100, 300])\n507\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 507 tensors\nCurrent Size of Ratings: 507 tensors\nSize of batch: torch.Size([32, 100, 300])\n508\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 508 tensors\nCurrent Size of Ratings: 508 tensors\nSize of batch: torch.Size([32, 100, 300])\n509\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 509 tensors\nCurrent Size of Ratings: 509 tensors\nSize of batch: torch.Size([32, 100, 300])\n510\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 510 tensors\nCurrent Size of Ratings: 510 tensors\nSize of batch: torch.Size([32, 100, 300])\n511\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 511 tensors\nCurrent Size of Ratings: 511 tensors\nSize of batch: torch.Size([32, 100, 300])\n512\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 512 tensors\nCurrent Size of Ratings: 512 tensors\nSize of batch: torch.Size([32, 100, 300])\n513\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 513 tensors\nCurrent Size of Ratings: 513 tensors\nSize of batch: torch.Size([32, 100, 300])\n514\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 514 tensors\nCurrent Size of Ratings: 514 tensors\nSize of batch: torch.Size([32, 100, 300])\n515\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 515 tensors\nCurrent Size of Ratings: 515 tensors\nSize of batch: torch.Size([32, 100, 300])\n516\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 516 tensors\nCurrent Size of Ratings: 516 tensors\nSize of batch: torch.Size([32, 100, 300])\n517\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 517 tensors\nCurrent Size of Ratings: 517 tensors\nSize of batch: torch.Size([32, 100, 300])\n518\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 518 tensors\nCurrent Size of Ratings: 518 tensors\nSize of batch: torch.Size([32, 100, 300])\n519\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 519 tensors\nCurrent Size of Ratings: 519 tensors\nSize of batch: torch.Size([32, 100, 300])\n520\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 520 tensors\nCurrent Size of Ratings: 520 tensors\nSize of batch: torch.Size([32, 100, 300])\n521\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 521 tensors\nCurrent Size of Ratings: 521 tensors\nSize of batch: torch.Size([32, 100, 300])\n522\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 522 tensors\nCurrent Size of Ratings: 522 tensors\nSize of batch: torch.Size([32, 100, 300])\n523\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 523 tensors\nCurrent Size of Ratings: 523 tensors\nSize of batch: torch.Size([32, 100, 300])\n524\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 524 tensors\nCurrent Size of Ratings: 524 tensors\nSize of batch: torch.Size([32, 100, 300])\n525\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 525 tensors\nCurrent Size of Ratings: 525 tensors\nSize of batch: torch.Size([32, 100, 300])\n526\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 526 tensors\nCurrent Size of Ratings: 526 tensors\nSize of batch: torch.Size([32, 100, 300])\n527\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 527 tensors\nCurrent Size of Ratings: 527 tensors\nSize of batch: torch.Size([32, 100, 300])\n528\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 528 tensors\nCurrent Size of Ratings: 528 tensors\nSize of batch: torch.Size([32, 100, 300])\n529\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 529 tensors\nCurrent Size of Ratings: 529 tensors\nSize of batch: torch.Size([32, 100, 300])\n530\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 530 tensors\nCurrent Size of Ratings: 530 tensors\nSize of batch: torch.Size([32, 100, 300])\n531\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 531 tensors\nCurrent Size of Ratings: 531 tensors\nSize of batch: torch.Size([32, 100, 300])\n532\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 532 tensors\nCurrent Size of Ratings: 532 tensors\nSize of batch: torch.Size([32, 100, 300])\n533\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 533 tensors\nCurrent Size of Ratings: 533 tensors\nSize of batch: torch.Size([32, 100, 300])\n534\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 534 tensors\nCurrent Size of Ratings: 534 tensors\nSize of batch: torch.Size([32, 100, 300])\n535\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 535 tensors\nCurrent Size of Ratings: 535 tensors\nSize of batch: torch.Size([32, 100, 300])\n536\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 536 tensors\nCurrent Size of Ratings: 536 tensors\nSize of batch: torch.Size([32, 100, 300])\n537\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 537 tensors\nCurrent Size of Ratings: 537 tensors\nSize of batch: torch.Size([32, 100, 300])\n538\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 538 tensors\nCurrent Size of Ratings: 538 tensors\nSize of batch: torch.Size([32, 100, 300])\n539\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 539 tensors\nCurrent Size of Ratings: 539 tensors\nSize of batch: torch.Size([32, 100, 300])\n540\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 540 tensors\nCurrent Size of Ratings: 540 tensors\nSize of batch: torch.Size([32, 100, 300])\n541\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 541 tensors\nCurrent Size of Ratings: 541 tensors\nSize of batch: torch.Size([32, 100, 300])\n542\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 542 tensors\nCurrent Size of Ratings: 542 tensors\nSize of batch: torch.Size([32, 100, 300])\n543\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 543 tensors\nCurrent Size of Ratings: 543 tensors\nSize of batch: torch.Size([32, 100, 300])\n544\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 544 tensors\nCurrent Size of Ratings: 544 tensors\nSize of batch: torch.Size([32, 100, 300])\n545\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 545 tensors\nCurrent Size of Ratings: 545 tensors\nSize of batch: torch.Size([32, 100, 300])\n546\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 546 tensors\nCurrent Size of Ratings: 546 tensors\nSize of batch: torch.Size([32, 100, 300])\n547\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 547 tensors\nCurrent Size of Ratings: 547 tensors\nSize of batch: torch.Size([32, 100, 300])\n548\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 548 tensors\nCurrent Size of Ratings: 548 tensors\nSize of batch: torch.Size([32, 100, 300])\n549\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 549 tensors\nCurrent Size of Ratings: 549 tensors\nSize of batch: torch.Size([32, 100, 300])\n550\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 550 tensors\nCurrent Size of Ratings: 550 tensors\nSize of batch: torch.Size([32, 100, 300])\n551\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 551 tensors\nCurrent Size of Ratings: 551 tensors\nSize of batch: torch.Size([32, 100, 300])\n552\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 552 tensors\nCurrent Size of Ratings: 552 tensors\nSize of batch: torch.Size([32, 100, 300])\n553\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 553 tensors\nCurrent Size of Ratings: 553 tensors\nSize of batch: torch.Size([32, 100, 300])\n554\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 554 tensors\nCurrent Size of Ratings: 554 tensors\nSize of batch: torch.Size([32, 100, 300])\n555\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 555 tensors\nCurrent Size of Ratings: 555 tensors\nSize of batch: torch.Size([32, 100, 300])\n556\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 556 tensors\nCurrent Size of Ratings: 556 tensors\nSize of batch: torch.Size([32, 100, 300])\n557\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 557 tensors\nCurrent Size of Ratings: 557 tensors\nSize of batch: torch.Size([32, 100, 300])\n558\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 558 tensors\nCurrent Size of Ratings: 558 tensors\nSize of batch: torch.Size([32, 100, 300])\n559\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 559 tensors\nCurrent Size of Ratings: 559 tensors\nSize of batch: torch.Size([32, 100, 300])\n560\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 560 tensors\nCurrent Size of Ratings: 560 tensors\nSize of batch: torch.Size([32, 100, 300])\n561\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 561 tensors\nCurrent Size of Ratings: 561 tensors\nSize of batch: torch.Size([32, 100, 300])\n562\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 562 tensors\nCurrent Size of Ratings: 562 tensors\nSize of batch: torch.Size([32, 100, 300])\n563\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 563 tensors\nCurrent Size of Ratings: 563 tensors\nSize of batch: torch.Size([32, 100, 300])\n564\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 564 tensors\nCurrent Size of Ratings: 564 tensors\nSize of batch: torch.Size([32, 100, 300])\n565\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 565 tensors\nCurrent Size of Ratings: 565 tensors\nSize of batch: torch.Size([32, 100, 300])\n566\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 566 tensors\nCurrent Size of Ratings: 566 tensors\nSize of batch: torch.Size([32, 100, 300])\n567\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 567 tensors\nCurrent Size of Ratings: 567 tensors\nSize of batch: torch.Size([32, 100, 300])\n568\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 568 tensors\nCurrent Size of Ratings: 568 tensors\nSize of batch: torch.Size([32, 100, 300])\n569\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 569 tensors\nCurrent Size of Ratings: 569 tensors\nSize of batch: torch.Size([32, 100, 300])\n570\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 570 tensors\nCurrent Size of Ratings: 570 tensors\nSize of batch: torch.Size([32, 100, 300])\n571\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 571 tensors\nCurrent Size of Ratings: 571 tensors\nSize of batch: torch.Size([32, 100, 300])\n572\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 572 tensors\nCurrent Size of Ratings: 572 tensors\nSize of batch: torch.Size([32, 100, 300])\n573\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 573 tensors\nCurrent Size of Ratings: 573 tensors\nSize of batch: torch.Size([32, 100, 300])\n574\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 574 tensors\nCurrent Size of Ratings: 574 tensors\nSize of batch: torch.Size([32, 100, 300])\n575\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 575 tensors\nCurrent Size of Ratings: 575 tensors\nSize of batch: torch.Size([32, 100, 300])\n576\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 576 tensors\nCurrent Size of Ratings: 576 tensors\nSize of batch: torch.Size([32, 100, 300])\n577\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 577 tensors\nCurrent Size of Ratings: 577 tensors\nSize of batch: torch.Size([32, 100, 300])\n578\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 578 tensors\nCurrent Size of Ratings: 578 tensors\nSize of batch: torch.Size([32, 100, 300])\n579\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 579 tensors\nCurrent Size of Ratings: 579 tensors\nSize of batch: torch.Size([32, 100, 300])\n580\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 580 tensors\nCurrent Size of Ratings: 580 tensors\nSize of batch: torch.Size([32, 100, 300])\n581\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 581 tensors\nCurrent Size of Ratings: 581 tensors\nSize of batch: torch.Size([32, 100, 300])\n582\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 582 tensors\nCurrent Size of Ratings: 582 tensors\nSize of batch: torch.Size([32, 100, 300])\n583\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 583 tensors\nCurrent Size of Ratings: 583 tensors\nSize of batch: torch.Size([32, 100, 300])\n584\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 584 tensors\nCurrent Size of Ratings: 584 tensors\nSize of batch: torch.Size([32, 100, 300])\n585\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 585 tensors\nCurrent Size of Ratings: 585 tensors\nSize of batch: torch.Size([32, 100, 300])\n586\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 586 tensors\nCurrent Size of Ratings: 586 tensors\nSize of batch: torch.Size([32, 100, 300])\n587\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 587 tensors\nCurrent Size of Ratings: 587 tensors\nSize of batch: torch.Size([32, 100, 300])\n588\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 588 tensors\nCurrent Size of Ratings: 588 tensors\nSize of batch: torch.Size([32, 100, 300])\n589\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 589 tensors\nCurrent Size of Ratings: 589 tensors\nSize of batch: torch.Size([32, 100, 300])\n590\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 590 tensors\nCurrent Size of Ratings: 590 tensors\nSize of batch: torch.Size([32, 100, 300])\n591\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 591 tensors\nCurrent Size of Ratings: 591 tensors\nSize of batch: torch.Size([32, 100, 300])\n592\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 592 tensors\nCurrent Size of Ratings: 592 tensors\nSize of batch: torch.Size([32, 100, 300])\n593\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 593 tensors\nCurrent Size of Ratings: 593 tensors\nSize of batch: torch.Size([32, 100, 300])\n594\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 594 tensors\nCurrent Size of Ratings: 594 tensors\nSize of batch: torch.Size([32, 100, 300])\n595\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 595 tensors\nCurrent Size of Ratings: 595 tensors\nSize of batch: torch.Size([32, 100, 300])\n596\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 596 tensors\nCurrent Size of Ratings: 596 tensors\nSize of batch: torch.Size([32, 100, 300])\n597\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 597 tensors\nCurrent Size of Ratings: 597 tensors\nSize of batch: torch.Size([32, 100, 300])\n598\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 598 tensors\nCurrent Size of Ratings: 598 tensors\nSize of batch: torch.Size([32, 100, 300])\n599\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 599 tensors\nCurrent Size of Ratings: 599 tensors\nSize of batch: torch.Size([32, 100, 300])\n600\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 600 tensors\nCurrent Size of Ratings: 600 tensors\nSize of batch: torch.Size([32, 100, 300])\n601\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 601 tensors\nCurrent Size of Ratings: 601 tensors\nSize of batch: torch.Size([32, 100, 300])\n602\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 602 tensors\nCurrent Size of Ratings: 602 tensors\nSize of batch: torch.Size([32, 100, 300])\n603\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 603 tensors\nCurrent Size of Ratings: 603 tensors\nSize of batch: torch.Size([32, 100, 300])\n604\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 604 tensors\nCurrent Size of Ratings: 604 tensors\nSize of batch: torch.Size([32, 100, 300])\n605\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 605 tensors\nCurrent Size of Ratings: 605 tensors\nSize of batch: torch.Size([32, 100, 300])\n606\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 606 tensors\nCurrent Size of Ratings: 606 tensors\nSize of batch: torch.Size([32, 100, 300])\n607\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 607 tensors\nCurrent Size of Ratings: 607 tensors\nSize of batch: torch.Size([32, 100, 300])\n608\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 608 tensors\nCurrent Size of Ratings: 608 tensors\nSize of batch: torch.Size([32, 100, 300])\n609\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 609 tensors\nCurrent Size of Ratings: 609 tensors\nSize of batch: torch.Size([32, 100, 300])\n610\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 610 tensors\nCurrent Size of Ratings: 610 tensors\nSize of batch: torch.Size([32, 100, 300])\n611\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 611 tensors\nCurrent Size of Ratings: 611 tensors\nSize of batch: torch.Size([32, 100, 300])\n612\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 612 tensors\nCurrent Size of Ratings: 612 tensors\nSize of batch: torch.Size([32, 100, 300])\n613\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 613 tensors\nCurrent Size of Ratings: 613 tensors\nSize of batch: torch.Size([32, 100, 300])\n614\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 614 tensors\nCurrent Size of Ratings: 614 tensors\nSize of batch: torch.Size([32, 100, 300])\n615\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 615 tensors\nCurrent Size of Ratings: 615 tensors\nSize of batch: torch.Size([32, 100, 300])\n616\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 616 tensors\nCurrent Size of Ratings: 616 tensors\nSize of batch: torch.Size([32, 100, 300])\n617\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 617 tensors\nCurrent Size of Ratings: 617 tensors\nSize of batch: torch.Size([32, 100, 300])\n618\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 618 tensors\nCurrent Size of Ratings: 618 tensors\nSize of batch: torch.Size([32, 100, 300])\n619\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 619 tensors\nCurrent Size of Ratings: 619 tensors\nSize of batch: torch.Size([32, 100, 300])\n620\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 620 tensors\nCurrent Size of Ratings: 620 tensors\nSize of batch: torch.Size([32, 100, 300])\n621\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 621 tensors\nCurrent Size of Ratings: 621 tensors\nSize of batch: torch.Size([32, 100, 300])\n622\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 622 tensors\nCurrent Size of Ratings: 622 tensors\nSize of batch: torch.Size([32, 100, 300])\n623\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 623 tensors\nCurrent Size of Ratings: 623 tensors\nSize of batch: torch.Size([32, 100, 300])\n624\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 624 tensors\nCurrent Size of Ratings: 624 tensors\nSize of batch: torch.Size([32, 100, 300])\n625\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 625 tensors\nCurrent Size of Ratings: 625 tensors\nSize of batch: torch.Size([32, 100, 300])\n626\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 626 tensors\nCurrent Size of Ratings: 626 tensors\nSize of batch: torch.Size([32, 100, 300])\n627\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 627 tensors\nCurrent Size of Ratings: 627 tensors\nSize of batch: torch.Size([32, 100, 300])\n628\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 628 tensors\nCurrent Size of Ratings: 628 tensors\nSize of batch: torch.Size([32, 100, 300])\n629\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 629 tensors\nCurrent Size of Ratings: 629 tensors\nSize of batch: torch.Size([32, 100, 300])\n630\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 630 tensors\nCurrent Size of Ratings: 630 tensors\nSize of batch: torch.Size([32, 100, 300])\n631\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 631 tensors\nCurrent Size of Ratings: 631 tensors\nSize of batch: torch.Size([32, 100, 300])\n632\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 632 tensors\nCurrent Size of Ratings: 632 tensors\nSize of batch: torch.Size([32, 100, 300])\n633\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 633 tensors\nCurrent Size of Ratings: 633 tensors\nSize of batch: torch.Size([32, 100, 300])\n634\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 634 tensors\nCurrent Size of Ratings: 634 tensors\nSize of batch: torch.Size([32, 100, 300])\n635\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 635 tensors\nCurrent Size of Ratings: 635 tensors\nSize of batch: torch.Size([32, 100, 300])\n636\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 636 tensors\nCurrent Size of Ratings: 636 tensors\nSize of batch: torch.Size([32, 100, 300])\n637\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 637 tensors\nCurrent Size of Ratings: 637 tensors\nSize of batch: torch.Size([32, 100, 300])\n638\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 638 tensors\nCurrent Size of Ratings: 638 tensors\nSize of batch: torch.Size([32, 100, 300])\n639\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 639 tensors\nCurrent Size of Ratings: 639 tensors\nSize of batch: torch.Size([32, 100, 300])\n640\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 640 tensors\nCurrent Size of Ratings: 640 tensors\nSize of batch: torch.Size([32, 100, 300])\n641\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 641 tensors\nCurrent Size of Ratings: 641 tensors\nSize of batch: torch.Size([32, 100, 300])\n642\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 642 tensors\nCurrent Size of Ratings: 642 tensors\nSize of batch: torch.Size([32, 100, 300])\n643\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 643 tensors\nCurrent Size of Ratings: 643 tensors\nSize of batch: torch.Size([32, 100, 300])\n644\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 644 tensors\nCurrent Size of Ratings: 644 tensors\nSize of batch: torch.Size([32, 100, 300])\n645\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 645 tensors\nCurrent Size of Ratings: 645 tensors\nSize of batch: torch.Size([32, 100, 300])\n646\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 646 tensors\nCurrent Size of Ratings: 646 tensors\nSize of batch: torch.Size([32, 100, 300])\n647\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 647 tensors\nCurrent Size of Ratings: 647 tensors\nSize of batch: torch.Size([32, 100, 300])\n648\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 648 tensors\nCurrent Size of Ratings: 648 tensors\nSize of batch: torch.Size([32, 100, 300])\n649\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 649 tensors\nCurrent Size of Ratings: 649 tensors\nSize of batch: torch.Size([32, 100, 300])\n650\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 650 tensors\nCurrent Size of Ratings: 650 tensors\nSize of batch: torch.Size([32, 100, 300])\n651\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 651 tensors\nCurrent Size of Ratings: 651 tensors\nSize of batch: torch.Size([32, 100, 300])\n652\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 652 tensors\nCurrent Size of Ratings: 652 tensors\nSize of batch: torch.Size([32, 100, 300])\n653\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 653 tensors\nCurrent Size of Ratings: 653 tensors\nSize of batch: torch.Size([32, 100, 300])\n654\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 654 tensors\nCurrent Size of Ratings: 654 tensors\nSize of batch: torch.Size([32, 100, 300])\n655\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 655 tensors\nCurrent Size of Ratings: 655 tensors\nSize of batch: torch.Size([32, 100, 300])\n656\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 656 tensors\nCurrent Size of Ratings: 656 tensors\nSize of batch: torch.Size([32, 100, 300])\n657\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 657 tensors\nCurrent Size of Ratings: 657 tensors\nSize of batch: torch.Size([32, 100, 300])\n658\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 658 tensors\nCurrent Size of Ratings: 658 tensors\nSize of batch: torch.Size([32, 100, 300])\n659\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 659 tensors\nCurrent Size of Ratings: 659 tensors\nSize of batch: torch.Size([32, 100, 300])\n660\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 660 tensors\nCurrent Size of Ratings: 660 tensors\nSize of batch: torch.Size([32, 100, 300])\n661\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 661 tensors\nCurrent Size of Ratings: 661 tensors\nSize of batch: torch.Size([32, 100, 300])\n662\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 662 tensors\nCurrent Size of Ratings: 662 tensors\nSize of batch: torch.Size([32, 100, 300])\n663\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 663 tensors\nCurrent Size of Ratings: 663 tensors\nSize of batch: torch.Size([32, 100, 300])\n664\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 664 tensors\nCurrent Size of Ratings: 664 tensors\nSize of batch: torch.Size([32, 100, 300])\n665\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 665 tensors\nCurrent Size of Ratings: 665 tensors\nSize of batch: torch.Size([32, 100, 300])\n666\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 666 tensors\nCurrent Size of Ratings: 666 tensors\nSize of batch: torch.Size([32, 100, 300])\n667\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 667 tensors\nCurrent Size of Ratings: 667 tensors\nSize of batch: torch.Size([32, 100, 300])\n668\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 668 tensors\nCurrent Size of Ratings: 668 tensors\nSize of batch: torch.Size([32, 100, 300])\n669\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 669 tensors\nCurrent Size of Ratings: 669 tensors\nSize of batch: torch.Size([32, 100, 300])\n670\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 670 tensors\nCurrent Size of Ratings: 670 tensors\nSize of batch: torch.Size([32, 100, 300])\n671\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 671 tensors\nCurrent Size of Ratings: 671 tensors\nSize of batch: torch.Size([32, 100, 300])\n672\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 672 tensors\nCurrent Size of Ratings: 672 tensors\nSize of batch: torch.Size([32, 100, 300])\n673\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 673 tensors\nCurrent Size of Ratings: 673 tensors\nSize of batch: torch.Size([32, 100, 300])\n674\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 674 tensors\nCurrent Size of Ratings: 674 tensors\nSize of batch: torch.Size([32, 100, 300])\n675\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 675 tensors\nCurrent Size of Ratings: 675 tensors\nSize of batch: torch.Size([32, 100, 300])\n676\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 676 tensors\nCurrent Size of Ratings: 676 tensors\nSize of batch: torch.Size([32, 100, 300])\n677\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 677 tensors\nCurrent Size of Ratings: 677 tensors\nSize of batch: torch.Size([32, 100, 300])\n678\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 678 tensors\nCurrent Size of Ratings: 678 tensors\nSize of batch: torch.Size([32, 100, 300])\n679\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 679 tensors\nCurrent Size of Ratings: 679 tensors\nSize of batch: torch.Size([32, 100, 300])\n680\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 680 tensors\nCurrent Size of Ratings: 680 tensors\nSize of batch: torch.Size([32, 100, 300])\n681\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 681 tensors\nCurrent Size of Ratings: 681 tensors\nSize of batch: torch.Size([32, 100, 300])\n682\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 682 tensors\nCurrent Size of Ratings: 682 tensors\nSize of batch: torch.Size([32, 100, 300])\n683\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 683 tensors\nCurrent Size of Ratings: 683 tensors\nSize of batch: torch.Size([32, 100, 300])\n684\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 684 tensors\nCurrent Size of Ratings: 684 tensors\nSize of batch: torch.Size([32, 100, 300])\n685\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 685 tensors\nCurrent Size of Ratings: 685 tensors\nSize of batch: torch.Size([32, 100, 300])\n686\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 686 tensors\nCurrent Size of Ratings: 686 tensors\nSize of batch: torch.Size([32, 100, 300])\n687\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 687 tensors\nCurrent Size of Ratings: 687 tensors\nSize of batch: torch.Size([32, 100, 300])\n688\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 688 tensors\nCurrent Size of Ratings: 688 tensors\nSize of batch: torch.Size([32, 100, 300])\n689\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 689 tensors\nCurrent Size of Ratings: 689 tensors\nSize of batch: torch.Size([32, 100, 300])\n690\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 690 tensors\nCurrent Size of Ratings: 690 tensors\nSize of batch: torch.Size([32, 100, 300])\n691\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 691 tensors\nCurrent Size of Ratings: 691 tensors\nSize of batch: torch.Size([32, 100, 300])\n692\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 692 tensors\nCurrent Size of Ratings: 692 tensors\nSize of batch: torch.Size([32, 100, 300])\n693\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 693 tensors\nCurrent Size of Ratings: 693 tensors\nSize of batch: torch.Size([32, 100, 300])\n694\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 694 tensors\nCurrent Size of Ratings: 694 tensors\nSize of batch: torch.Size([32, 100, 300])\n695\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 695 tensors\nCurrent Size of Ratings: 695 tensors\nSize of batch: torch.Size([32, 100, 300])\n696\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 696 tensors\nCurrent Size of Ratings: 696 tensors\nSize of batch: torch.Size([32, 100, 300])\n697\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 697 tensors\nCurrent Size of Ratings: 697 tensors\nSize of batch: torch.Size([32, 100, 300])\n698\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 698 tensors\nCurrent Size of Ratings: 698 tensors\nSize of batch: torch.Size([32, 100, 300])\n699\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 699 tensors\nCurrent Size of Ratings: 699 tensors\nSize of batch: torch.Size([32, 100, 300])\n700\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 700 tensors\nCurrent Size of Ratings: 700 tensors\nSize of batch: torch.Size([32, 100, 300])\n701\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 701 tensors\nCurrent Size of Ratings: 701 tensors\nSize of batch: torch.Size([32, 100, 300])\n702\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 702 tensors\nCurrent Size of Ratings: 702 tensors\nSize of batch: torch.Size([32, 100, 300])\n703\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 703 tensors\nCurrent Size of Ratings: 703 tensors\nSize of batch: torch.Size([32, 100, 300])\n704\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 704 tensors\nCurrent Size of Ratings: 704 tensors\nSize of batch: torch.Size([32, 100, 300])\n705\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 705 tensors\nCurrent Size of Ratings: 705 tensors\nSize of batch: torch.Size([32, 100, 300])\n706\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 706 tensors\nCurrent Size of Ratings: 706 tensors\nSize of batch: torch.Size([32, 100, 300])\n707\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 707 tensors\nCurrent Size of Ratings: 707 tensors\nSize of batch: torch.Size([32, 100, 300])\n708\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 708 tensors\nCurrent Size of Ratings: 708 tensors\nSize of batch: torch.Size([32, 100, 300])\n709\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 709 tensors\nCurrent Size of Ratings: 709 tensors\nSize of batch: torch.Size([32, 100, 300])\n710\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 710 tensors\nCurrent Size of Ratings: 710 tensors\nSize of batch: torch.Size([32, 100, 300])\n711\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 711 tensors\nCurrent Size of Ratings: 711 tensors\nSize of batch: torch.Size([32, 100, 300])\n712\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 712 tensors\nCurrent Size of Ratings: 712 tensors\nSize of batch: torch.Size([32, 100, 300])\n713\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 713 tensors\nCurrent Size of Ratings: 713 tensors\nSize of batch: torch.Size([32, 100, 300])\n714\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 714 tensors\nCurrent Size of Ratings: 714 tensors\nSize of batch: torch.Size([32, 100, 300])\n715\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 715 tensors\nCurrent Size of Ratings: 715 tensors\nSize of batch: torch.Size([32, 100, 300])\n716\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 716 tensors\nCurrent Size of Ratings: 716 tensors\nSize of batch: torch.Size([32, 100, 300])\n717\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 717 tensors\nCurrent Size of Ratings: 717 tensors\nSize of batch: torch.Size([32, 100, 300])\n718\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 718 tensors\nCurrent Size of Ratings: 718 tensors\nSize of batch: torch.Size([32, 100, 300])\n719\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 719 tensors\nCurrent Size of Ratings: 719 tensors\nSize of batch: torch.Size([32, 100, 300])\n720\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 720 tensors\nCurrent Size of Ratings: 720 tensors\nSize of batch: torch.Size([32, 100, 300])\n721\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 721 tensors\nCurrent Size of Ratings: 721 tensors\nSize of batch: torch.Size([32, 100, 300])\n722\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 722 tensors\nCurrent Size of Ratings: 722 tensors\nSize of batch: torch.Size([32, 100, 300])\n723\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 723 tensors\nCurrent Size of Ratings: 723 tensors\nSize of batch: torch.Size([32, 100, 300])\n724\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 724 tensors\nCurrent Size of Ratings: 724 tensors\nSize of batch: torch.Size([32, 100, 300])\n725\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 725 tensors\nCurrent Size of Ratings: 725 tensors\nSize of batch: torch.Size([32, 100, 300])\n726\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 726 tensors\nCurrent Size of Ratings: 726 tensors\nSize of batch: torch.Size([32, 100, 300])\n727\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 727 tensors\nCurrent Size of Ratings: 727 tensors\nSize of batch: torch.Size([32, 100, 300])\n728\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 728 tensors\nCurrent Size of Ratings: 728 tensors\nSize of batch: torch.Size([32, 100, 300])\n729\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 729 tensors\nCurrent Size of Ratings: 729 tensors\nSize of batch: torch.Size([32, 100, 300])\n730\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 730 tensors\nCurrent Size of Ratings: 730 tensors\nSize of batch: torch.Size([32, 100, 300])\n731\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 731 tensors\nCurrent Size of Ratings: 731 tensors\nSize of batch: torch.Size([32, 100, 300])\n732\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 732 tensors\nCurrent Size of Ratings: 732 tensors\nSize of batch: torch.Size([32, 100, 300])\n733\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 733 tensors\nCurrent Size of Ratings: 733 tensors\nSize of batch: torch.Size([32, 100, 300])\n734\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 734 tensors\nCurrent Size of Ratings: 734 tensors\nSize of batch: torch.Size([32, 100, 300])\n735\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 735 tensors\nCurrent Size of Ratings: 735 tensors\nSize of batch: torch.Size([32, 100, 300])\n736\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 736 tensors\nCurrent Size of Ratings: 736 tensors\nSize of batch: torch.Size([32, 100, 300])\n737\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 737 tensors\nCurrent Size of Ratings: 737 tensors\nSize of batch: torch.Size([32, 100, 300])\n738\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 738 tensors\nCurrent Size of Ratings: 738 tensors\nSize of batch: torch.Size([32, 100, 300])\n739\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 739 tensors\nCurrent Size of Ratings: 739 tensors\nSize of batch: torch.Size([32, 100, 300])\n740\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 740 tensors\nCurrent Size of Ratings: 740 tensors\nSize of batch: torch.Size([32, 100, 300])\n741\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 741 tensors\nCurrent Size of Ratings: 741 tensors\nSize of batch: torch.Size([32, 100, 300])\n742\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 742 tensors\nCurrent Size of Ratings: 742 tensors\nSize of batch: torch.Size([32, 100, 300])\n743\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 743 tensors\nCurrent Size of Ratings: 743 tensors\nSize of batch: torch.Size([32, 100, 300])\n744\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 744 tensors\nCurrent Size of Ratings: 744 tensors\nSize of batch: torch.Size([32, 100, 300])\n745\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 745 tensors\nCurrent Size of Ratings: 745 tensors\nSize of batch: torch.Size([32, 100, 300])\n746\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 746 tensors\nCurrent Size of Ratings: 746 tensors\nSize of batch: torch.Size([32, 100, 300])\n747\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 747 tensors\nCurrent Size of Ratings: 747 tensors\nSize of batch: torch.Size([32, 100, 300])\n748\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 748 tensors\nCurrent Size of Ratings: 748 tensors\nSize of batch: torch.Size([32, 100, 300])\n749\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 749 tensors\nCurrent Size of Ratings: 749 tensors\nSize of batch: torch.Size([32, 100, 300])\n750\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 750 tensors\nCurrent Size of Ratings: 750 tensors\nSize of batch: torch.Size([32, 100, 300])\n751\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 751 tensors\nCurrent Size of Ratings: 751 tensors\nSize of batch: torch.Size([32, 100, 300])\n752\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 752 tensors\nCurrent Size of Ratings: 752 tensors\nSize of batch: torch.Size([32, 100, 300])\n753\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 753 tensors\nCurrent Size of Ratings: 753 tensors\nSize of batch: torch.Size([32, 100, 300])\n754\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 754 tensors\nCurrent Size of Ratings: 754 tensors\nSize of batch: torch.Size([32, 100, 300])\n755\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 755 tensors\nCurrent Size of Ratings: 755 tensors\nSize of batch: torch.Size([32, 100, 300])\n756\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 756 tensors\nCurrent Size of Ratings: 756 tensors\nSize of batch: torch.Size([32, 100, 300])\n757\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 757 tensors\nCurrent Size of Ratings: 757 tensors\nSize of batch: torch.Size([32, 100, 300])\n758\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 758 tensors\nCurrent Size of Ratings: 758 tensors\nSize of batch: torch.Size([32, 100, 300])\n759\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 759 tensors\nCurrent Size of Ratings: 759 tensors\nSize of batch: torch.Size([32, 100, 300])\n760\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 760 tensors\nCurrent Size of Ratings: 760 tensors\nSize of batch: torch.Size([32, 100, 300])\n761\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 761 tensors\nCurrent Size of Ratings: 761 tensors\nSize of batch: torch.Size([32, 100, 300])\n762\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 762 tensors\nCurrent Size of Ratings: 762 tensors\nSize of batch: torch.Size([32, 100, 300])\n763\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 763 tensors\nCurrent Size of Ratings: 763 tensors\nSize of batch: torch.Size([32, 100, 300])\n764\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 764 tensors\nCurrent Size of Ratings: 764 tensors\nSize of batch: torch.Size([32, 100, 300])\n765\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 765 tensors\nCurrent Size of Ratings: 765 tensors\nSize of batch: torch.Size([32, 100, 300])\n766\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 766 tensors\nCurrent Size of Ratings: 766 tensors\nSize of batch: torch.Size([32, 100, 300])\n767\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 767 tensors\nCurrent Size of Ratings: 767 tensors\nSize of batch: torch.Size([32, 100, 300])\n768\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 768 tensors\nCurrent Size of Ratings: 768 tensors\nSize of batch: torch.Size([32, 100, 300])\n769\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 769 tensors\nCurrent Size of Ratings: 769 tensors\nSize of batch: torch.Size([32, 100, 300])\n770\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 770 tensors\nCurrent Size of Ratings: 770 tensors\nSize of batch: torch.Size([32, 100, 300])\n771\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 771 tensors\nCurrent Size of Ratings: 771 tensors\nSize of batch: torch.Size([32, 100, 300])\n772\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 772 tensors\nCurrent Size of Ratings: 772 tensors\nSize of batch: torch.Size([32, 100, 300])\n773\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 773 tensors\nCurrent Size of Ratings: 773 tensors\nSize of batch: torch.Size([32, 100, 300])\n774\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 774 tensors\nCurrent Size of Ratings: 774 tensors\nSize of batch: torch.Size([32, 100, 300])\n775\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 775 tensors\nCurrent Size of Ratings: 775 tensors\nSize of batch: torch.Size([32, 100, 300])\n776\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 776 tensors\nCurrent Size of Ratings: 776 tensors\nSize of batch: torch.Size([32, 100, 300])\n777\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 777 tensors\nCurrent Size of Ratings: 777 tensors\nSize of batch: torch.Size([32, 100, 300])\n778\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 778 tensors\nCurrent Size of Ratings: 778 tensors\nSize of batch: torch.Size([32, 100, 300])\n779\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 779 tensors\nCurrent Size of Ratings: 779 tensors\nSize of batch: torch.Size([32, 100, 300])\n780\nTotal allocated memory: 3333718016 bytes\nCurrent Size of Reviews: 780 tensors\nCurrent Size of Ratings: 780 tensors\nSize of batch: torch.Size([32, 100, 300])\n781\nTotal allocated memory: 3333103616 bytes\nCurrent Size of Reviews: 781 tensors\nCurrent Size of Ratings: 781 tensors\nSize of batch: torch.Size([8, 100, 300])\n782\nTotal allocated memory: 3330838016 bytes\nCurrent Size of Reviews: 782 tensors\nCurrent Size of Ratings: 782 tensors\nConcatenated Reviews Size: torch.Size([25000, 100, 300])\nConcatenated Ratings Size: torch.Size([25000])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(total_encoded_batch.shape)  # Check the shape of the combined encoded tensor\nprint(total_y_batch.shape)\nprint('\\n')\n\n# size in MB\nprint(f'total_encoded_batch in bytes: { total_encoded_batch.nelement() * total_encoded_batch.element_size() }')\nprint(f'total_y_batch in bytes: { total_y_batch.nelement() * total_y_batch.element_size() }')\nprint('\\n')\n\nprint(f\"The Encoded batch is on: {total_encoded_batch.device}\")\nprint(f\"The Y batch is on: {total_y_batch.device}\")\nprint('\\n')\nprint(stacked_encoder)\nprint('\\n')","metadata":{"execution":{"iopub.status.busy":"2024-04-14T09:50:52.454478Z","iopub.execute_input":"2024-04-14T09:50:52.454998Z","iopub.status.idle":"2024-04-14T09:50:52.463023Z","shell.execute_reply.started":"2024-04-14T09:50:52.454970Z","shell.execute_reply":"2024-04-14T09:50:52.462064Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"torch.Size([25000, 100, 300])\ntorch.Size([25000])\n\n\ntotal_encoded_batch in bytes: 3000000000\ntotal_y_batch in bytes: 200000\n\n\nThe Encoded batch is on: cpu\nThe Y batch is on: cpu\n\n\nStackedEncoder(\n  (layers): ModuleList(\n    (0-3): 4 x EncoderLayer(\n      (self_attn): MultiHeadedAttention(\n        (linears): ModuleList(\n          (0-3): 4 x Linear(in_features=300, out_features=300, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n      )\n      (feed_forward): PositionwiseFeedForward(\n        (w_1): Linear(in_features=300, out_features=1024, bias=True)\n        (w_2): Linear(in_features=1024, out_features=300, bias=True)\n        (dropout): Dropout(p=0.0, inplace=False)\n      )\n      (sublayer): ModuleList(\n        (0-1): 2 x LayerNorm()\n      )\n      (dropout): Dropout(p=0.0, inplace=False)\n    )\n  )\n  (norm): LayerNorm()\n)\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Training approaches like masked-language modeling next sentence prediction, permutative language modeling, contrastive learning\n\n1. Visualization: You can visualize the input and output tensors to see if there are any noticeable patterns or differences. Techniques like heatmaps, scatter plots, or dimensionality reduction methods (e.g., t-SNE, PCA) can help you visualize high-dimensional data in a more interpretable way.\n\n2. Comparing input and output: You can directly compare the input and output tensors element-wise to see how the values have changed. This can give you an idea of the magnitude and direction of the transformations applied by the encoder.\n\n3. Analyzing attention weights: If your transformer encoder uses attention mechanisms, you can examine the attention weights to understand which parts of the input the model is focusing on. Higher attention weights indicate that the model is paying more attention to those specific positions or features.\n\n4. Probing the learned representations: You can train a separate model (e.g., a classifier or regressor) on top of the encoded representations to see if they capture meaningful information for a downstream task. If the model performs well, it suggests that the encoder has learned useful representations.\n\n5. Ablation studies: You can systematically remove or modify certain components of the transformer encoder (e.g., attention layers, normalization) and observe how the output changes. This can help you understand the role and impact of each component on the encoding process.\n\n6. Analyzing the distribution of values: You can compute statistics like mean, variance, and range of the input and output tensors to see how the distribution of values has changed. This can provide insights into the overall effect of the encoder on the data.\n\n7. Gradient-based methods: If you have access to the gradients of the encoder, you can use techniques like saliency maps or gradient-based attribution methods to identify which input features have the most influence on the output.\n\nKeep in mind that interpreting the behavior of deep learning models can be challenging, especially for complex architectures like transformers. It often requires a combination of different analysis techniques and domain knowledge to gain meaningful insights.\n\nRemember to normalize or scale the input and output tensors appropriately before visualization or comparison, as the raw floating-point values may have different scales and ranges.","metadata":{}}]}